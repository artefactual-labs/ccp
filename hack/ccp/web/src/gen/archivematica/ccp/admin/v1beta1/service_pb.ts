// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file archivematica/ccp/admin/v1beta1/service.proto (package archivematica.ccp.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { BoolValue, Message, proto3, StringValue } from "@bufbuild/protobuf";
import { Choice, Decision, Job, Package, PackageType, ProcessingConfigField, TransferType } from "./admin_pb.js";

/**
 * @generated from message archivematica.ccp.admin.v1beta1.CreatePackageRequest
 */
export class CreatePackageRequest extends Message<CreatePackageRequest> {
  /**
   * Name of the transfer.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Type of the transfer, default to "standard".
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.TransferType type = 2;
   */
  type = TransferType.UNSPECIFIED;

  /**
   * Identifier of the accession.
   *
   * @generated from field: string accession = 3;
   */
  accession = "";

  /**
   * Identifier in the access system.
   *
   * @generated from field: string access_system_id = 4;
   */
  accessSystemId = "";

  /**
   * List of <location_uuid>:<relative_path> to be included in the transfer.
   * Locations should be associated with this pipeline, and relative path should
   * be relative to the location. The strings should be base64-encoded.
   *
   * @generated from field: repeated string path = 5;
   */
  path: string[] = [];

  /**
   * The identifier (UUIDv4) of the metadata set to be included.
   * An empty string is not a valid UUID, use null instead (default).
   *
   * @generated from field: google.protobuf.StringValue metadata_set_id = 6;
   */
  metadataSetId?: string;

  /**
   * An option to auto-approve the package. It is enabled by default.
   *
   * @generated from field: google.protobuf.BoolValue auto_approve = 7;
   */
  autoApprove?: boolean;

  /**
   * Name of the processing configuration file to be included.
   *
   * @generated from field: string processing_config = 8;
   */
  processingConfig = "";

  constructor(data?: PartialMessage<CreatePackageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.CreatePackageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
    { no: 3, name: "accession", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "access_system_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "metadata_set_id", kind: "message", T: StringValue },
    { no: 7, name: "auto_approve", kind: "message", T: BoolValue },
    { no: 8, name: "processing_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePackageRequest {
    return new CreatePackageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePackageRequest {
    return new CreatePackageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePackageRequest {
    return new CreatePackageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePackageRequest | PlainMessage<CreatePackageRequest> | undefined, b: CreatePackageRequest | PlainMessage<CreatePackageRequest> | undefined): boolean {
    return proto3.util.equals(CreatePackageRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.CreatePackageResponse
 */
export class CreatePackageResponse extends Message<CreatePackageResponse> {
  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<CreatePackageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.CreatePackageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreatePackageResponse {
    return new CreatePackageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreatePackageResponse {
    return new CreatePackageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreatePackageResponse {
    return new CreatePackageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreatePackageResponse | PlainMessage<CreatePackageResponse> | undefined, b: CreatePackageResponse | PlainMessage<CreatePackageResponse> | undefined): boolean {
    return proto3.util.equals(CreatePackageResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ReadPackageRequest
 */
export class ReadPackageRequest extends Message<ReadPackageRequest> {
  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ReadPackageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ReadPackageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadPackageRequest {
    return new ReadPackageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadPackageRequest {
    return new ReadPackageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadPackageRequest {
    return new ReadPackageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadPackageRequest | PlainMessage<ReadPackageRequest> | undefined, b: ReadPackageRequest | PlainMessage<ReadPackageRequest> | undefined): boolean {
    return proto3.util.equals(ReadPackageRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ReadPackageResponse
 */
export class ReadPackageResponse extends Message<ReadPackageResponse> {
  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.Package pkg = 1;
   */
  pkg?: Package;

  /**
   * List of awaiting decisions related to this package.
   * Only used if the status of the package is AWAITING_DECISION.
   *
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Decision decision = 2;
   */
  decision: Decision[] = [];

  /**
   * List of jobs related to this package.
   *
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Job job = 3;
   */
  job: Job[] = [];

  constructor(data?: PartialMessage<ReadPackageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ReadPackageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pkg", kind: "message", T: Package },
    { no: 2, name: "decision", kind: "message", T: Decision, repeated: true },
    { no: 3, name: "job", kind: "message", T: Job, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadPackageResponse {
    return new ReadPackageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadPackageResponse {
    return new ReadPackageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadPackageResponse {
    return new ReadPackageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadPackageResponse | PlainMessage<ReadPackageResponse> | undefined, b: ReadPackageResponse | PlainMessage<ReadPackageResponse> | undefined): boolean {
    return proto3.util.equals(ReadPackageResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListPackagesRequest
 */
export class ListPackagesRequest extends Message<ListPackagesRequest> {
  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.PackageType type = 1;
   */
  type = PackageType.UNSPECIFIED;

  /**
   * @generated from field: bool exclude_hidden = 2;
   */
  excludeHidden = false;

  constructor(data?: PartialMessage<ListPackagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListPackagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PackageType) },
    { no: 2, name: "exclude_hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPackagesRequest {
    return new ListPackagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPackagesRequest {
    return new ListPackagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPackagesRequest {
    return new ListPackagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListPackagesRequest | PlainMessage<ListPackagesRequest> | undefined, b: ListPackagesRequest | PlainMessage<ListPackagesRequest> | undefined): boolean {
    return proto3.util.equals(ListPackagesRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListPackagesResponse
 */
export class ListPackagesResponse extends Message<ListPackagesResponse> {
  /**
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Package package = 1;
   */
  package: Package[] = [];

  constructor(data?: PartialMessage<ListPackagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListPackagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "package", kind: "message", T: Package, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListPackagesResponse {
    return new ListPackagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListPackagesResponse {
    return new ListPackagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListPackagesResponse {
    return new ListPackagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListPackagesResponse | PlainMessage<ListPackagesResponse> | undefined, b: ListPackagesResponse | PlainMessage<ListPackagesResponse> | undefined): boolean {
    return proto3.util.equals(ListPackagesResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListDecisionsRequest
 */
export class ListDecisionsRequest extends Message<ListDecisionsRequest> {
  constructor(data?: PartialMessage<ListDecisionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListDecisionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDecisionsRequest {
    return new ListDecisionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDecisionsRequest {
    return new ListDecisionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDecisionsRequest {
    return new ListDecisionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDecisionsRequest | PlainMessage<ListDecisionsRequest> | undefined, b: ListDecisionsRequest | PlainMessage<ListDecisionsRequest> | undefined): boolean {
    return proto3.util.equals(ListDecisionsRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListDecisionsResponse
 */
export class ListDecisionsResponse extends Message<ListDecisionsResponse> {
  /**
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Decision decision = 1;
   */
  decision: Decision[] = [];

  constructor(data?: PartialMessage<ListDecisionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListDecisionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "decision", kind: "message", T: Decision, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDecisionsResponse {
    return new ListDecisionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDecisionsResponse {
    return new ListDecisionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDecisionsResponse {
    return new ListDecisionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDecisionsResponse | PlainMessage<ListDecisionsResponse> | undefined, b: ListDecisionsResponse | PlainMessage<ListDecisionsResponse> | undefined): boolean {
    return proto3.util.equals(ListDecisionsResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ResolveDecisionRequest
 */
export class ResolveDecisionRequest extends Message<ResolveDecisionRequest> {
  /**
   * Identifier of the decision (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The choice to be used to resolve the decision.
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.Choice choice = 2;
   */
  choice?: Choice;

  constructor(data?: PartialMessage<ResolveDecisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ResolveDecisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "choice", kind: "message", T: Choice },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveDecisionRequest {
    return new ResolveDecisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveDecisionRequest {
    return new ResolveDecisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveDecisionRequest {
    return new ResolveDecisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveDecisionRequest | PlainMessage<ResolveDecisionRequest> | undefined, b: ResolveDecisionRequest | PlainMessage<ResolveDecisionRequest> | undefined): boolean {
    return proto3.util.equals(ResolveDecisionRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ResolveDecisionResponse
 */
export class ResolveDecisionResponse extends Message<ResolveDecisionResponse> {
  constructor(data?: PartialMessage<ResolveDecisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ResolveDecisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveDecisionResponse {
    return new ResolveDecisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveDecisionResponse {
    return new ResolveDecisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveDecisionResponse {
    return new ResolveDecisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveDecisionResponse | PlainMessage<ResolveDecisionResponse> | undefined, b: ResolveDecisionResponse | PlainMessage<ResolveDecisionResponse> | undefined): boolean {
    return proto3.util.equals(ResolveDecisionResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsRequest
 */
export class ListProcessingConfigurationFieldsRequest extends Message<ListProcessingConfigurationFieldsRequest> {
  constructor(data?: PartialMessage<ListProcessingConfigurationFieldsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessingConfigurationFieldsRequest {
    return new ListProcessingConfigurationFieldsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessingConfigurationFieldsRequest {
    return new ListProcessingConfigurationFieldsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessingConfigurationFieldsRequest {
    return new ListProcessingConfigurationFieldsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessingConfigurationFieldsRequest | PlainMessage<ListProcessingConfigurationFieldsRequest> | undefined, b: ListProcessingConfigurationFieldsRequest | PlainMessage<ListProcessingConfigurationFieldsRequest> | undefined): boolean {
    return proto3.util.equals(ListProcessingConfigurationFieldsRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsResponse
 */
export class ListProcessingConfigurationFieldsResponse extends Message<ListProcessingConfigurationFieldsResponse> {
  /**
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.ProcessingConfigField field = 1;
   */
  field: ProcessingConfigField[] = [];

  constructor(data?: PartialMessage<ListProcessingConfigurationFieldsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "field", kind: "message", T: ProcessingConfigField, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProcessingConfigurationFieldsResponse {
    return new ListProcessingConfigurationFieldsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProcessingConfigurationFieldsResponse {
    return new ListProcessingConfigurationFieldsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProcessingConfigurationFieldsResponse {
    return new ListProcessingConfigurationFieldsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProcessingConfigurationFieldsResponse | PlainMessage<ListProcessingConfigurationFieldsResponse> | undefined, b: ListProcessingConfigurationFieldsResponse | PlainMessage<ListProcessingConfigurationFieldsResponse> | undefined): boolean {
    return proto3.util.equals(ListProcessingConfigurationFieldsResponse, a, b);
  }
}

