// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file archivematica/ccp/admin/v1beta1/i18n.proto (package archivematica.ccp.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * I18n represents a collection of translations for different languages. It is
 * used for internationalization (i18n) purposes.
 *
 * @generated from message archivematica.ccp.admin.v1beta1.I18n
 */
export class I18n extends Message<I18n> {
  /**
   * A map that stores translations for different languages. Keys are language
   * codes (e.g., "en", "es", "fr"). Values are the corresponding translations
   * in those languages.
   *
   * @generated from field: map<string, string> tx = 1;
   */
  tx: { [key: string]: string } = {};

  constructor(data?: PartialMessage<I18n>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.I18n";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): I18n {
    return new I18n().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): I18n {
    return new I18n().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): I18n {
    return new I18n().fromJsonString(jsonString, options);
  }

  static equals(a: I18n | PlainMessage<I18n> | undefined, b: I18n | PlainMessage<I18n> | undefined): boolean {
    return proto3.util.equals(I18n, a, b);
  }
}

