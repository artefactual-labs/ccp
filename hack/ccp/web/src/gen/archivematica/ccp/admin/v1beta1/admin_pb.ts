// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file archivematica/ccp/admin/v1beta1/admin.proto (package archivematica.ccp.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListActivePackagesRequest
 */
export class ListActivePackagesRequest extends Message<ListActivePackagesRequest> {
  constructor(data?: PartialMessage<ListActivePackagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListActivePackagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListActivePackagesRequest {
    return new ListActivePackagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListActivePackagesRequest {
    return new ListActivePackagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListActivePackagesRequest {
    return new ListActivePackagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListActivePackagesRequest | PlainMessage<ListActivePackagesRequest> | undefined, b: ListActivePackagesRequest | PlainMessage<ListActivePackagesRequest> | undefined): boolean {
    return proto3.util.equals(ListActivePackagesRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListActivePackagesResponse
 */
export class ListActivePackagesResponse extends Message<ListActivePackagesResponse> {
  /**
   * @generated from field: repeated string value = 1;
   */
  value: string[] = [];

  constructor(data?: PartialMessage<ListActivePackagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListActivePackagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListActivePackagesResponse {
    return new ListActivePackagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListActivePackagesResponse {
    return new ListActivePackagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListActivePackagesResponse {
    return new ListActivePackagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListActivePackagesResponse | PlainMessage<ListActivePackagesResponse> | undefined, b: ListActivePackagesResponse | PlainMessage<ListActivePackagesResponse> | undefined): boolean {
    return proto3.util.equals(ListActivePackagesResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsRequest
 */
export class ListAwaitingDecisionsRequest extends Message<ListAwaitingDecisionsRequest> {
  constructor(data?: PartialMessage<ListAwaitingDecisionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAwaitingDecisionsRequest {
    return new ListAwaitingDecisionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAwaitingDecisionsRequest {
    return new ListAwaitingDecisionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAwaitingDecisionsRequest {
    return new ListAwaitingDecisionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListAwaitingDecisionsRequest | PlainMessage<ListAwaitingDecisionsRequest> | undefined, b: ListAwaitingDecisionsRequest | PlainMessage<ListAwaitingDecisionsRequest> | undefined): boolean {
    return proto3.util.equals(ListAwaitingDecisionsRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsResponse
 */
export class ListAwaitingDecisionsResponse extends Message<ListAwaitingDecisionsResponse> {
  /**
   * @generated from field: repeated string value = 1;
   */
  value: string[] = [];

  constructor(data?: PartialMessage<ListAwaitingDecisionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListAwaitingDecisionsResponse {
    return new ListAwaitingDecisionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListAwaitingDecisionsResponse {
    return new ListAwaitingDecisionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListAwaitingDecisionsResponse {
    return new ListAwaitingDecisionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListAwaitingDecisionsResponse | PlainMessage<ListAwaitingDecisionsResponse> | undefined, b: ListAwaitingDecisionsResponse | PlainMessage<ListAwaitingDecisionsResponse> | undefined): boolean {
    return proto3.util.equals(ListAwaitingDecisionsResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionRequest
 */
export class ResolveAwaitingDecisionRequest extends Message<ResolveAwaitingDecisionRequest> {
  constructor(data?: PartialMessage<ResolveAwaitingDecisionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveAwaitingDecisionRequest {
    return new ResolveAwaitingDecisionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveAwaitingDecisionRequest {
    return new ResolveAwaitingDecisionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveAwaitingDecisionRequest {
    return new ResolveAwaitingDecisionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveAwaitingDecisionRequest | PlainMessage<ResolveAwaitingDecisionRequest> | undefined, b: ResolveAwaitingDecisionRequest | PlainMessage<ResolveAwaitingDecisionRequest> | undefined): boolean {
    return proto3.util.equals(ResolveAwaitingDecisionRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionResponse
 */
export class ResolveAwaitingDecisionResponse extends Message<ResolveAwaitingDecisionResponse> {
  constructor(data?: PartialMessage<ResolveAwaitingDecisionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResolveAwaitingDecisionResponse {
    return new ResolveAwaitingDecisionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResolveAwaitingDecisionResponse {
    return new ResolveAwaitingDecisionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResolveAwaitingDecisionResponse {
    return new ResolveAwaitingDecisionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResolveAwaitingDecisionResponse | PlainMessage<ResolveAwaitingDecisionResponse> | undefined, b: ResolveAwaitingDecisionResponse | PlainMessage<ResolveAwaitingDecisionResponse> | undefined): boolean {
    return proto3.util.equals(ResolveAwaitingDecisionResponse, a, b);
  }
}

