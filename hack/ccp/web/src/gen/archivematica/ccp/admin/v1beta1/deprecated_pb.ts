// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file archivematica/ccp/admin/v1beta1/deprecated.proto (package archivematica.ccp.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { TransferType } from "./admin_pb.js";

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApproveJobRequest
 */
export class ApproveJobRequest extends Message<ApproveJobRequest> {
  /**
   * Identifier of the job (UUIDv4).
   *
   * @generated from field: string job_id = 1;
   */
  jobId = "";

  /**
   * Identifier of the choice (UUIDv4).
   *
   * @generated from field: string choice = 2;
   */
  choice = "";

  constructor(data?: PartialMessage<ApproveJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApproveJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "choice", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveJobRequest {
    return new ApproveJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveJobRequest {
    return new ApproveJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveJobRequest {
    return new ApproveJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveJobRequest | PlainMessage<ApproveJobRequest> | undefined, b: ApproveJobRequest | PlainMessage<ApproveJobRequest> | undefined): boolean {
    return proto3.util.equals(ApproveJobRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApproveJobResponse
 */
export class ApproveJobResponse extends Message<ApproveJobResponse> {
  constructor(data?: PartialMessage<ApproveJobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApproveJobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveJobResponse {
    return new ApproveJobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveJobResponse {
    return new ApproveJobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveJobResponse {
    return new ApproveJobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveJobResponse | PlainMessage<ApproveJobResponse> | undefined, b: ApproveJobResponse | PlainMessage<ApproveJobResponse> | undefined): boolean {
    return proto3.util.equals(ApproveJobResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApproveTransferByPathRequest
 */
export class ApproveTransferByPathRequest extends Message<ApproveTransferByPathRequest> {
  /**
   * Directory where the transfer is currently located.
   *
   * @generated from field: string directory = 1;
   */
  directory = "";

  /**
   * Type of the transfer, default to "standard".
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.TransferType type = 2;
   */
  type = TransferType.UNSPECIFIED;

  constructor(data?: PartialMessage<ApproveTransferByPathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApproveTransferByPathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveTransferByPathRequest {
    return new ApproveTransferByPathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveTransferByPathRequest {
    return new ApproveTransferByPathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveTransferByPathRequest {
    return new ApproveTransferByPathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveTransferByPathRequest | PlainMessage<ApproveTransferByPathRequest> | undefined, b: ApproveTransferByPathRequest | PlainMessage<ApproveTransferByPathRequest> | undefined): boolean {
    return proto3.util.equals(ApproveTransferByPathRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApproveTransferByPathResponse
 */
export class ApproveTransferByPathResponse extends Message<ApproveTransferByPathResponse> {
  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApproveTransferByPathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApproveTransferByPathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApproveTransferByPathResponse {
    return new ApproveTransferByPathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApproveTransferByPathResponse {
    return new ApproveTransferByPathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApproveTransferByPathResponse {
    return new ApproveTransferByPathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApproveTransferByPathResponse | PlainMessage<ApproveTransferByPathResponse> | undefined, b: ApproveTransferByPathResponse | PlainMessage<ApproveTransferByPathResponse> | undefined): boolean {
    return proto3.util.equals(ApproveTransferByPathResponse, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApprovePartialReingestRequest
 */
export class ApprovePartialReingestRequest extends Message<ApprovePartialReingestRequest> {
  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApprovePartialReingestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApprovePartialReingestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApprovePartialReingestRequest {
    return new ApprovePartialReingestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApprovePartialReingestRequest {
    return new ApprovePartialReingestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApprovePartialReingestRequest {
    return new ApprovePartialReingestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApprovePartialReingestRequest | PlainMessage<ApprovePartialReingestRequest> | undefined, b: ApprovePartialReingestRequest | PlainMessage<ApprovePartialReingestRequest> | undefined): boolean {
    return proto3.util.equals(ApprovePartialReingestRequest, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ApprovePartialReingestResponse
 */
export class ApprovePartialReingestResponse extends Message<ApprovePartialReingestResponse> {
  constructor(data?: PartialMessage<ApprovePartialReingestResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ApprovePartialReingestResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApprovePartialReingestResponse {
    return new ApprovePartialReingestResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApprovePartialReingestResponse {
    return new ApprovePartialReingestResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApprovePartialReingestResponse {
    return new ApprovePartialReingestResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ApprovePartialReingestResponse | PlainMessage<ApprovePartialReingestResponse> | undefined, b: ApprovePartialReingestResponse | PlainMessage<ApprovePartialReingestResponse> | undefined): boolean {
    return proto3.util.equals(ApprovePartialReingestResponse, a, b);
  }
}

