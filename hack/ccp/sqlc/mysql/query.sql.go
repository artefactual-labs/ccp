// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"

	uuid "github.com/google/uuid"
)

const cleanUpActiveJobs = `-- name: CleanUpActiveJobs :exec
UPDATE Jobs SET currentStep = 4 WHERE currentStep = 3
`

func (q *Queries) CleanUpActiveJobs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveJobsStmt, cleanUpActiveJobs)
	return err
}

const cleanUpActiveSIPs = `-- name: CleanUpActiveSIPs :exec
UPDATE SIPs SET status = 4, completed_at = UTC_TIMESTAMP() WHERE status IN (0, 1)
`

func (q *Queries) CleanUpActiveSIPs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveSIPsStmt, cleanUpActiveSIPs)
	return err
}

const cleanUpActiveTasks = `-- name: CleanUpActiveTasks :exec
UPDATE Tasks SET exitCode = -1, stdError = "MCP shut down while processing." WHERE exitCode IS NULL
`

func (q *Queries) CleanUpActiveTasks(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveTasksStmt, cleanUpActiveTasks)
	return err
}

const cleanUpActiveTransfers = `-- name: CleanUpActiveTransfers :exec
UPDATE Transfers SET status = 4, completed_at = UTC_TIMESTAMP() WHERE status IN (0, 1)
`

func (q *Queries) CleanUpActiveTransfers(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveTransfersStmt, cleanUpActiveTransfers)
	return err
}

const cleanUpAwaitingJobs = `-- name: CleanUpAwaitingJobs :exec
DELETE FROM Jobs WHERE currentStep = 1
`

func (q *Queries) CleanUpAwaitingJobs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpAwaitingJobsStmt, cleanUpAwaitingJobs)
	return err
}

const createJob = `-- name: CreateJob :exec
INSERT INTO Jobs (jobUUID, jobType) VALUES (?, ?)
`

type CreateJobParams struct {
	ID   uuid.UUID
	Type string
}

func (q *Queries) CreateJob(ctx context.Context, arg *CreateJobParams) error {
	_, err := q.exec(ctx, q.createJobStmt, createJob, arg.ID, arg.Type)
	return err
}

const createWorkflowUnitVariable = `-- name: CreateWorkflowUnitVariable :exec
INSERT INTO UnitVariables (unitType, unitUUID, variable, variableValue, microServiceChainLink) VALUES (?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE variableValue = VALUES(variableValue), microServiceChainLink = VALUES(microServiceChainLink)
`

type CreateWorkflowUnitVariableParams struct {
	Unittype              sql.NullString
	Unituuid              uuid.UUID
	Variable              sql.NullString
	Variablevalue         sql.NullString
	Microservicechainlink sql.NullString
}

func (q *Queries) CreateWorkflowUnitVariable(ctx context.Context, arg *CreateWorkflowUnitVariableParams) error {
	_, err := q.exec(ctx, q.createWorkflowUnitVariableStmt, createWorkflowUnitVariable,
		arg.Unittype,
		arg.Unituuid,
		arg.Variable,
		arg.Variablevalue,
		arg.Microservicechainlink,
	)
	return err
}

const readWorkflowUnitVariable = `-- name: ReadWorkflowUnitVariable :one
SELECT microServiceChainLink FROM UnitVariables WHERE unitType = ? AND unitUUID = ? AND variable = ?
`

type ReadWorkflowUnitVariableParams struct {
	Unittype sql.NullString
	Unituuid uuid.UUID
	Variable sql.NullString
}

func (q *Queries) ReadWorkflowUnitVariable(ctx context.Context, arg *ReadWorkflowUnitVariableParams) (sql.NullString, error) {
	row := q.queryRow(ctx, q.readWorkflowUnitVariableStmt, readWorkflowUnitVariable, arg.Unittype, arg.Unituuid, arg.Variable)
	var microservicechainlink sql.NullString
	err := row.Scan(&microservicechainlink)
	return microservicechainlink, err
}
