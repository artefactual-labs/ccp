syntax = "proto3";

package archivematica.ccp.admin.v1beta1;

import "buf/validate/validate.proto";
import "google/protobuf/wrappers.proto";

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// MCPServer
//
//   _job_approve_handler
//     [Approve awaiting decision]
//     Params: jobUUID, chain, user_id
//     Return: <string> - informative only.
//
//   _job_awaiting_approval_handler
//     [List awaiting decisions]
//     Params: <none>
//     Return: <string> - xml (choicesAvailableForUnits).
//
//   _package_create_handler
//     [Start processing of a new package asynchronously]
//     Params: name, type, accession, access_system_id, path, metadata_set_id, user_id.
//     Return: <string> - identifier of the package deferred for processing.
//
//   _approve_transfer_by_path_handler
//     [Approve transfer by path] (could be deprecated if automation-tools is updated)
//     Params: db_transfer_path, transfer_type, user_id
//     Return: <string> - job.sipuuid
//
//   _approve_partial_reingest_handler
//     [Approve reingest]
//     Params: sip_uuid, user_id
//     Return: <void>
//
//   _get_processing_config_fields_handler
//     [List processing configurations]
//     Params: lang
//     Return: <list[object]> - processing fields
//
//   _units_statuses_handler
//     [List currently processing units] (should not hit the database)
//     Params: type, lang
//     Return: <object>
//
//   _unit_status_handler
//     [Read processing details of a specific unit]
//     Params: unit_id, lang
//     Return: <object> - unit, jobs
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

service AdminService {
  rpc CreatePackage(CreatePackageRequest) returns (CreatePackageResponse) {}

  rpc ApproveTransfer(ApproveTransferRequest) returns (ApproveTransferResponse) {}

  rpc ListActivePackages(ListActivePackagesRequest) returns (ListActivePackagesResponse) {}

  rpc ListAwaitingDecisions(ListAwaitingDecisionsRequest) returns (ListAwaitingDecisionsResponse) {}

  rpc ResolveAwaitingDecision(ResolveAwaitingDecisionRequest) returns (ResolveAwaitingDecisionResponse) {}
}

message CreatePackageRequest {
  // Name of the transfer.
  string name = 1 [(buf.validate.field).string.min_len = 1];

  // Type of the transfer, default to "standard".
  TransferType type = 2 [(buf.validate.field).enum = {defined_only: true}];

  // Identifier of the accession.
  string accession = 3;

  // Identifier in the access system.
  string access_system_id = 4;

  // List of <location_uuid>:<relative_path> to be included in the transfer.
  // Locations should be associated with this pipeline, and relative path should
  // be relative to the location. The strings should be base64-encoded.
  repeated string path = 5 [(buf.validate.field).repeated = {
    unique: true,
    min_items: 1,
    max_items: 500,
    items: {
      string: {min_len: 1},
    },
  }];

  // The identifier of the metadata set to be included in this submission.
  string metadata_set_id = 6;

  // An option to auto-approve the package. It is enabled by default.
  google.protobuf.BoolValue auto_approve = 7;

  // Name of the processing configuration file to be included.
  string processing_config = 8;
}

message CreatePackageResponse {
  // Identifier of the package as a string (UUIDv4).
  string id = 1;
}

message ApproveTransferRequest {
  // Directory where the transfer is currently located.
  string directory = 1;

  // Type of the transfer, default to "standard".
  TransferType type = 2;
}

message ApproveTransferResponse {
  // Identifier of the package as a string (UUIDv4).
  string id = 1;
}

message ListActivePackagesRequest {}

message ListActivePackagesResponse {
  repeated string value = 1;
}

message ListAwaitingDecisionsRequest {}

message ListAwaitingDecisionsResponse {
  repeated string value = 1;
}

message ResolveAwaitingDecisionRequest {}

message ResolveAwaitingDecisionResponse {}

// Different types of transfers.
enum TransferType {
  TRANSFER_TYPE_UNSPECIFIED = 0;
  TRANSFER_TYPE_STANDARD = 1;
  TRANSFER_TYPE_ZIP_FILE = 2;
  TRANSFER_TYPE_UNZIPPED_BAG = 3;
  TRANSFER_TYPE_ZIPPED_BAG = 4;
  TRANSFER_TYPE_DSPACE = 5;
  TRANSFER_TYPE_MAILDIR = 6;
  TRANSFER_TYPE_TRIM = 7;
  TRANSFER_TYPE_DATAVERSE = 8;
}
