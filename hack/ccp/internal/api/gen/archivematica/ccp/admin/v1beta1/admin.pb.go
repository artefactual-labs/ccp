// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: archivematica/ccp/admin/v1beta1/admin.proto

package adminv1beta1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Different types of transfers.
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED  TransferType = 0
	TransferType_TRANSFER_TYPE_STANDARD     TransferType = 1
	TransferType_TRANSFER_TYPE_ZIP_FILE     TransferType = 2
	TransferType_TRANSFER_TYPE_UNZIPPED_BAG TransferType = 3
	TransferType_TRANSFER_TYPE_ZIPPED_BAG   TransferType = 4
	TransferType_TRANSFER_TYPE_DSPACE       TransferType = 5
	TransferType_TRANSFER_TYPE_MAILDIR      TransferType = 6
	TransferType_TRANSFER_TYPE_TRIM         TransferType = 7
	TransferType_TRANSFER_TYPE_DATAVERSE    TransferType = 8
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "TRANSFER_TYPE_STANDARD",
		2: "TRANSFER_TYPE_ZIP_FILE",
		3: "TRANSFER_TYPE_UNZIPPED_BAG",
		4: "TRANSFER_TYPE_ZIPPED_BAG",
		5: "TRANSFER_TYPE_DSPACE",
		6: "TRANSFER_TYPE_MAILDIR",
		7: "TRANSFER_TYPE_TRIM",
		8: "TRANSFER_TYPE_DATAVERSE",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":  0,
		"TRANSFER_TYPE_STANDARD":     1,
		"TRANSFER_TYPE_ZIP_FILE":     2,
		"TRANSFER_TYPE_UNZIPPED_BAG": 3,
		"TRANSFER_TYPE_ZIPPED_BAG":   4,
		"TRANSFER_TYPE_DSPACE":       5,
		"TRANSFER_TYPE_MAILDIR":      6,
		"TRANSFER_TYPE_TRIM":         7,
		"TRANSFER_TYPE_DATAVERSE":    8,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{0}
}

type CreatePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the transfer.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the transfer, default to "standard".
	Type TransferType `protobuf:"varint,2,opt,name=type,proto3,enum=archivematica.ccp.admin.v1beta1.TransferType" json:"type,omitempty"`
	// Identifier of the accession.
	Accession string `protobuf:"bytes,3,opt,name=accession,proto3" json:"accession,omitempty"`
	// Identifier in the access system.
	AccessSystemId string `protobuf:"bytes,4,opt,name=access_system_id,json=accessSystemId,proto3" json:"access_system_id,omitempty"`
	// List of <location_uuid>:<relative_path> to be included in the transfer.
	// Locations should be associated with this pipeline, and relative path should
	// be relative to the location. The strings should be base64-encoded.
	Path []string `protobuf:"bytes,5,rep,name=path,proto3" json:"path,omitempty"`
	// The identifier of the metadata set to be included in this submission.
	MetadataSetId string `protobuf:"bytes,6,opt,name=metadata_set_id,json=metadataSetId,proto3" json:"metadata_set_id,omitempty"`
	// An option to auto-approve the package. It is enabled by default.
	AutoApprove *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=auto_approve,json=autoApprove,proto3" json:"auto_approve,omitempty"`
	// Name of the processing configuration file to be included.
	ProcessingConfig string `protobuf:"bytes,8,opt,name=processing_config,json=processingConfig,proto3" json:"processing_config,omitempty"`
}

func (x *CreatePackageRequest) Reset() {
	*x = CreatePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePackageRequest) ProtoMessage() {}

func (x *CreatePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePackageRequest.ProtoReflect.Descriptor instead.
func (*CreatePackageRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePackageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePackageRequest) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *CreatePackageRequest) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *CreatePackageRequest) GetAccessSystemId() string {
	if x != nil {
		return x.AccessSystemId
	}
	return ""
}

func (x *CreatePackageRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CreatePackageRequest) GetMetadataSetId() string {
	if x != nil {
		return x.MetadataSetId
	}
	return ""
}

func (x *CreatePackageRequest) GetAutoApprove() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoApprove
	}
	return nil
}

func (x *CreatePackageRequest) GetProcessingConfig() string {
	if x != nil {
		return x.ProcessingConfig
	}
	return ""
}

type CreatePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the package as a string (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePackageResponse) Reset() {
	*x = CreatePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePackageResponse) ProtoMessage() {}

func (x *CreatePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePackageResponse.ProtoReflect.Descriptor instead.
func (*CreatePackageResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePackageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ApproveTransferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Directory where the transfer is currently located.
	Directory string `protobuf:"bytes,1,opt,name=directory,proto3" json:"directory,omitempty"`
	// Type of the transfer, default to "standard".
	Type TransferType `protobuf:"varint,2,opt,name=type,proto3,enum=archivematica.ccp.admin.v1beta1.TransferType" json:"type,omitempty"`
}

func (x *ApproveTransferRequest) Reset() {
	*x = ApproveTransferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransferRequest) ProtoMessage() {}

func (x *ApproveTransferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransferRequest.ProtoReflect.Descriptor instead.
func (*ApproveTransferRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ApproveTransferRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *ApproveTransferRequest) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

type ApproveTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the package as a string (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ApproveTransferResponse) Reset() {
	*x = ApproveTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveTransferResponse) ProtoMessage() {}

func (x *ApproveTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveTransferResponse.ProtoReflect.Descriptor instead.
func (*ApproveTransferResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{3}
}

func (x *ApproveTransferResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListActivePackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListActivePackagesRequest) Reset() {
	*x = ListActivePackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivePackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivePackagesRequest) ProtoMessage() {}

func (x *ListActivePackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivePackagesRequest.ProtoReflect.Descriptor instead.
func (*ListActivePackagesRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{4}
}

type ListActivePackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListActivePackagesResponse) Reset() {
	*x = ListActivePackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivePackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivePackagesResponse) ProtoMessage() {}

func (x *ListActivePackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivePackagesResponse.ProtoReflect.Descriptor instead.
func (*ListActivePackagesResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{5}
}

func (x *ListActivePackagesResponse) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListAwaitingDecisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAwaitingDecisionsRequest) Reset() {
	*x = ListAwaitingDecisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAwaitingDecisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAwaitingDecisionsRequest) ProtoMessage() {}

func (x *ListAwaitingDecisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAwaitingDecisionsRequest.ProtoReflect.Descriptor instead.
func (*ListAwaitingDecisionsRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{6}
}

type ListAwaitingDecisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListAwaitingDecisionsResponse) Reset() {
	*x = ListAwaitingDecisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAwaitingDecisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAwaitingDecisionsResponse) ProtoMessage() {}

func (x *ListAwaitingDecisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAwaitingDecisionsResponse.ProtoReflect.Descriptor instead.
func (*ListAwaitingDecisionsResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{7}
}

func (x *ListAwaitingDecisionsResponse) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResolveAwaitingDecisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveAwaitingDecisionRequest) Reset() {
	*x = ResolveAwaitingDecisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAwaitingDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAwaitingDecisionRequest) ProtoMessage() {}

func (x *ResolveAwaitingDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAwaitingDecisionRequest.ProtoReflect.Descriptor instead.
func (*ResolveAwaitingDecisionRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{8}
}

type ResolveAwaitingDecisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveAwaitingDecisionResponse) Reset() {
	*x = ResolveAwaitingDecisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAwaitingDecisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAwaitingDecisionResponse) ProtoMessage() {}

func (x *ResolveAwaitingDecisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAwaitingDecisionResponse.ProtoReflect.Descriptor instead.
func (*ResolveAwaitingDecisionResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{9}
}

var File_archivematica_ccp_admin_v1beta1_admin_proto protoreflect.FileDescriptor

var file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd,
	0x02, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x27,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x29, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a,
	0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x8d, 0x02, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x5a, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x47,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x5a, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x04,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c,
	0x44, 0x49, 0x52, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x08, 0x32, 0xe8, 0x05, 0x0a, 0x0c, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x35, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86,
	0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3a,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x40, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xbd, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x41, 0xaa, 0x02,
	0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x43,
	0x63, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xca, 0x02, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xe2, 0x02, 0x2b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x3a, 0x3a, 0x43, 0x63, 0x70, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescOnce sync.Once
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData = file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc
)

func file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP() []byte {
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescOnce.Do(func() {
		file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData)
	})
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData
}

var file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes = []interface{}{
	(TransferType)(0),                       // 0: archivematica.ccp.admin.v1beta1.TransferType
	(*CreatePackageRequest)(nil),            // 1: archivematica.ccp.admin.v1beta1.CreatePackageRequest
	(*CreatePackageResponse)(nil),           // 2: archivematica.ccp.admin.v1beta1.CreatePackageResponse
	(*ApproveTransferRequest)(nil),          // 3: archivematica.ccp.admin.v1beta1.ApproveTransferRequest
	(*ApproveTransferResponse)(nil),         // 4: archivematica.ccp.admin.v1beta1.ApproveTransferResponse
	(*ListActivePackagesRequest)(nil),       // 5: archivematica.ccp.admin.v1beta1.ListActivePackagesRequest
	(*ListActivePackagesResponse)(nil),      // 6: archivematica.ccp.admin.v1beta1.ListActivePackagesResponse
	(*ListAwaitingDecisionsRequest)(nil),    // 7: archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsRequest
	(*ListAwaitingDecisionsResponse)(nil),   // 8: archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsResponse
	(*ResolveAwaitingDecisionRequest)(nil),  // 9: archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionRequest
	(*ResolveAwaitingDecisionResponse)(nil), // 10: archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionResponse
	(*wrapperspb.BoolValue)(nil),            // 11: google.protobuf.BoolValue
}
var file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs = []int32{
	0,  // 0: archivematica.ccp.admin.v1beta1.CreatePackageRequest.type:type_name -> archivematica.ccp.admin.v1beta1.TransferType
	11, // 1: archivematica.ccp.admin.v1beta1.CreatePackageRequest.auto_approve:type_name -> google.protobuf.BoolValue
	0,  // 2: archivematica.ccp.admin.v1beta1.ApproveTransferRequest.type:type_name -> archivematica.ccp.admin.v1beta1.TransferType
	1,  // 3: archivematica.ccp.admin.v1beta1.AdminService.CreatePackage:input_type -> archivematica.ccp.admin.v1beta1.CreatePackageRequest
	3,  // 4: archivematica.ccp.admin.v1beta1.AdminService.ApproveTransfer:input_type -> archivematica.ccp.admin.v1beta1.ApproveTransferRequest
	5,  // 5: archivematica.ccp.admin.v1beta1.AdminService.ListActivePackages:input_type -> archivematica.ccp.admin.v1beta1.ListActivePackagesRequest
	7,  // 6: archivematica.ccp.admin.v1beta1.AdminService.ListAwaitingDecisions:input_type -> archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsRequest
	9,  // 7: archivematica.ccp.admin.v1beta1.AdminService.ResolveAwaitingDecision:input_type -> archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionRequest
	2,  // 8: archivematica.ccp.admin.v1beta1.AdminService.CreatePackage:output_type -> archivematica.ccp.admin.v1beta1.CreatePackageResponse
	4,  // 9: archivematica.ccp.admin.v1beta1.AdminService.ApproveTransfer:output_type -> archivematica.ccp.admin.v1beta1.ApproveTransferResponse
	6,  // 10: archivematica.ccp.admin.v1beta1.AdminService.ListActivePackages:output_type -> archivematica.ccp.admin.v1beta1.ListActivePackagesResponse
	8,  // 11: archivematica.ccp.admin.v1beta1.AdminService.ListAwaitingDecisions:output_type -> archivematica.ccp.admin.v1beta1.ListAwaitingDecisionsResponse
	10, // 12: archivematica.ccp.admin.v1beta1.AdminService.ResolveAwaitingDecision:output_type -> archivematica.ccp.admin.v1beta1.ResolveAwaitingDecisionResponse
	8,  // [8:13] is the sub-list for method output_type
	3,  // [3:8] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_archivematica_ccp_admin_v1beta1_admin_proto_init() }
func file_archivematica_ccp_admin_v1beta1_admin_proto_init() {
	if File_archivematica_ccp_admin_v1beta1_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivePackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivePackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAwaitingDecisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAwaitingDecisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAwaitingDecisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAwaitingDecisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes,
		DependencyIndexes: file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs,
		EnumInfos:         file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes,
		MessageInfos:      file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes,
	}.Build()
	File_archivematica_ccp_admin_v1beta1_admin_proto = out.File
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc = nil
	file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes = nil
	file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs = nil
}
