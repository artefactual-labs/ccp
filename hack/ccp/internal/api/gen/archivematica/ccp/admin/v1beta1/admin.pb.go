// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: archivematica/ccp/admin/v1beta1/admin.proto

package adminv1beta1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Different types of transfers.
type TransferType int32

const (
	TransferType_TRANSFER_TYPE_UNSPECIFIED  TransferType = 0
	TransferType_TRANSFER_TYPE_STANDARD     TransferType = 1
	TransferType_TRANSFER_TYPE_ZIP_FILE     TransferType = 2
	TransferType_TRANSFER_TYPE_UNZIPPED_BAG TransferType = 3
	TransferType_TRANSFER_TYPE_ZIPPED_BAG   TransferType = 4
	TransferType_TRANSFER_TYPE_DSPACE       TransferType = 5
	TransferType_TRANSFER_TYPE_MAILDIR      TransferType = 6
	TransferType_TRANSFER_TYPE_TRIM         TransferType = 7
	TransferType_TRANSFER_TYPE_DATAVERSE    TransferType = 8
)

// Enum value maps for TransferType.
var (
	TransferType_name = map[int32]string{
		0: "TRANSFER_TYPE_UNSPECIFIED",
		1: "TRANSFER_TYPE_STANDARD",
		2: "TRANSFER_TYPE_ZIP_FILE",
		3: "TRANSFER_TYPE_UNZIPPED_BAG",
		4: "TRANSFER_TYPE_ZIPPED_BAG",
		5: "TRANSFER_TYPE_DSPACE",
		6: "TRANSFER_TYPE_MAILDIR",
		7: "TRANSFER_TYPE_TRIM",
		8: "TRANSFER_TYPE_DATAVERSE",
	}
	TransferType_value = map[string]int32{
		"TRANSFER_TYPE_UNSPECIFIED":  0,
		"TRANSFER_TYPE_STANDARD":     1,
		"TRANSFER_TYPE_ZIP_FILE":     2,
		"TRANSFER_TYPE_UNZIPPED_BAG": 3,
		"TRANSFER_TYPE_ZIPPED_BAG":   4,
		"TRANSFER_TYPE_DSPACE":       5,
		"TRANSFER_TYPE_MAILDIR":      6,
		"TRANSFER_TYPE_TRIM":         7,
		"TRANSFER_TYPE_DATAVERSE":    8,
	}
)

func (x TransferType) Enum() *TransferType {
	p := new(TransferType)
	*p = x
	return p
}

func (x TransferType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferType) Descriptor() protoreflect.EnumDescriptor {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[0].Descriptor()
}

func (TransferType) Type() protoreflect.EnumType {
	return &file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[0]
}

func (x TransferType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferType.Descriptor instead.
func (TransferType) EnumDescriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{0}
}

type PackageType int32

const (
	PackageType_PACKAGE_TYPE_UNSPECIFIED PackageType = 0
	PackageType_PACKAGE_TYPE_TRANSFER    PackageType = 1
	PackageType_PACKAGE_TYPE_SIP         PackageType = 2
	PackageType_PACKAGE_TYPE_AIP         PackageType = 3
	PackageType_PACKAGE_TYPE_DIP         PackageType = 4
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "PACKAGE_TYPE_UNSPECIFIED",
		1: "PACKAGE_TYPE_TRANSFER",
		2: "PACKAGE_TYPE_SIP",
		3: "PACKAGE_TYPE_AIP",
		4: "PACKAGE_TYPE_DIP",
	}
	PackageType_value = map[string]int32{
		"PACKAGE_TYPE_UNSPECIFIED": 0,
		"PACKAGE_TYPE_TRANSFER":    1,
		"PACKAGE_TYPE_SIP":         2,
		"PACKAGE_TYPE_AIP":         3,
		"PACKAGE_TYPE_DIP":         4,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[1].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[1]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{1}
}

type PackageStatus int32

const (
	PackageStatus_PACKAGE_STATUS_UNSPECIFIED            PackageStatus = 0
	PackageStatus_PACKAGE_STATUS_PROCESSING             PackageStatus = 1
	PackageStatus_PACKAGE_STATUS_DONE                   PackageStatus = 2
	PackageStatus_PACKAGE_STATUS_COMPLETED_SUCCESSFULLY PackageStatus = 3
	PackageStatus_PACKAGE_STATUS_FAILED                 PackageStatus = 4
	// This is not found in the database but we can infer it at runtime.
	PackageStatus_PACKAGE_STATUS_AWAITING_DECISION PackageStatus = 5
)

// Enum value maps for PackageStatus.
var (
	PackageStatus_name = map[int32]string{
		0: "PACKAGE_STATUS_UNSPECIFIED",
		1: "PACKAGE_STATUS_PROCESSING",
		2: "PACKAGE_STATUS_DONE",
		3: "PACKAGE_STATUS_COMPLETED_SUCCESSFULLY",
		4: "PACKAGE_STATUS_FAILED",
		5: "PACKAGE_STATUS_AWAITING_DECISION",
	}
	PackageStatus_value = map[string]int32{
		"PACKAGE_STATUS_UNSPECIFIED":            0,
		"PACKAGE_STATUS_PROCESSING":             1,
		"PACKAGE_STATUS_DONE":                   2,
		"PACKAGE_STATUS_COMPLETED_SUCCESSFULLY": 3,
		"PACKAGE_STATUS_FAILED":                 4,
		"PACKAGE_STATUS_AWAITING_DECISION":      5,
	}
)

func (x PackageStatus) Enum() *PackageStatus {
	p := new(PackageStatus)
	*p = x
	return p
}

func (x PackageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[2].Descriptor()
}

func (PackageStatus) Type() protoreflect.EnumType {
	return &file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[2]
}

func (x PackageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageStatus.Descriptor instead.
func (PackageStatus) EnumDescriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{2}
}

type JobStatus int32

const (
	JobStatus_JOB_STATUS_UNSPECIFIED            JobStatus = 0
	JobStatus_JOB_STATUS_AWAITING_DECISION      JobStatus = 1
	JobStatus_JOB_STATUS_COMPLETED_SUCCESSFULLY JobStatus = 2
	JobStatus_JOB_STATUS_EXECUTING_COMMANDS     JobStatus = 3
	JobStatus_JOB_STATUS_FAILED                 JobStatus = 4
)

// Enum value maps for JobStatus.
var (
	JobStatus_name = map[int32]string{
		0: "JOB_STATUS_UNSPECIFIED",
		1: "JOB_STATUS_AWAITING_DECISION",
		2: "JOB_STATUS_COMPLETED_SUCCESSFULLY",
		3: "JOB_STATUS_EXECUTING_COMMANDS",
		4: "JOB_STATUS_FAILED",
	}
	JobStatus_value = map[string]int32{
		"JOB_STATUS_UNSPECIFIED":            0,
		"JOB_STATUS_AWAITING_DECISION":      1,
		"JOB_STATUS_COMPLETED_SUCCESSFULLY": 2,
		"JOB_STATUS_EXECUTING_COMMANDS":     3,
		"JOB_STATUS_FAILED":                 4,
	}
)

func (x JobStatus) Enum() *JobStatus {
	p := new(JobStatus)
	*p = x
	return p
}

func (x JobStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[3].Descriptor()
}

func (JobStatus) Type() protoreflect.EnumType {
	return &file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes[3]
}

func (x JobStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobStatus.Descriptor instead.
func (JobStatus) EnumDescriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{3}
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the package (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the transfer.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the transfer.
	Type TransferType `protobuf:"varint,3,opt,name=type,proto3,enum=archivematica.ccp.admin.v1beta1.TransferType" json:"type,omitempty"`
	// Status of the package.
	Status PackageStatus `protobuf:"varint,4,opt,name=status,proto3,enum=archivematica.ccp.admin.v1beta1.PackageStatus" json:"status,omitempty"`
	// Creation timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Current directory.
	Directory string `protobuf:"bytes,6,opt,name=directory,proto3" json:"directory,omitempty"`
	// Access system identifier.
	AccessSystemId string `protobuf:"bytes,7,opt,name=access_system_id,json=accessSystemId,proto3" json:"access_system_id,omitempty"`
	// Whether the package has been hidden by the user.
	Hidden bool `protobuf:"varint,8,opt,name=hidden,proto3" json:"hidden,omitempty"`
	// List of associated jobs. It may not always be populated.
	Job []*Job `protobuf:"bytes,9,rep,name=job,proto3" json:"job,omitempty"`
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{0}
}

func (x *Package) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Package) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *Package) GetStatus() PackageStatus {
	if x != nil {
		return x.Status
	}
	return PackageStatus_PACKAGE_STATUS_UNSPECIFIED
}

func (x *Package) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Package) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *Package) GetAccessSystemId() string {
	if x != nil {
		return x.AccessSystemId
	}
	return ""
}

func (x *Package) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Package) GetJob() []*Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the job (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of the package (UUIDv4).
	PackageId       string                 `protobuf:"bytes,2,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	PackageType     PackageType            `protobuf:"varint,3,opt,name=package_type,json=packageType,proto3,enum=archivematica.ccp.admin.v1beta1.PackageType" json:"package_type,omitempty"`
	LinkId          string                 `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Status          JobStatus              `protobuf:"varint,5,opt,name=status,proto3,enum=archivematica.ccp.admin.v1beta1.JobStatus" json:"status,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Group           string                 `protobuf:"bytes,7,opt,name=group,proto3" json:"group,omitempty"`
	LinkDescription string                 `protobuf:"bytes,8,opt,name=link_description,json=linkDescription,proto3" json:"link_description,omitempty"`
	Hidden          bool                   `protobuf:"varint,9,opt,name=hidden,proto3" json:"hidden,omitempty"`
	Directory       string                 `protobuf:"bytes,10,opt,name=directory,proto3" json:"directory,omitempty"`
	// Only populated if requested.
	// TODO: this is not efficient but it's currently needed.
	Decision *Decision `protobuf:"bytes,11,opt,name=decision,proto3" json:"decision,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{1}
}

func (x *Job) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Job) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *Job) GetPackageType() PackageType {
	if x != nil {
		return x.PackageType
	}
	return PackageType_PACKAGE_TYPE_UNSPECIFIED
}

func (x *Job) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *Job) GetStatus() JobStatus {
	if x != nil {
		return x.Status
	}
	return JobStatus_JOB_STATUS_UNSPECIFIED
}

func (x *Job) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Job) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Job) GetLinkDescription() string {
	if x != nil {
		return x.LinkDescription
	}
	return ""
}

func (x *Job) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Job) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *Job) GetDecision() *Decision {
	if x != nil {
		return x.Decision
	}
	return nil
}

type Decision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the decision (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the decision (prompt).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Identifier of the package (UUIDv4).
	PackageId   string `protobuf:"bytes,3,opt,name=package_id,json=packageId,proto3" json:"package_id,omitempty"`
	PackagePath string `protobuf:"bytes,4,opt,name=package_path,json=packagePath,proto3" json:"package_path,omitempty"`
	PackageType string `protobuf:"bytes,5,opt,name=package_type,json=packageType,proto3" json:"package_type,omitempty"` // "Transfer", "SIP", "DIP".
	// Identifier of the job (UUIDv4).
	JobId string `protobuf:"bytes,6,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Ordered list of choices. The position can be used to resolve a decision.
	Choice []*Choice `protobuf:"bytes,7,rep,name=choice,proto3" json:"choice,omitempty"`
}

func (x *Decision) Reset() {
	*x = Decision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decision) ProtoMessage() {}

func (x *Decision) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decision.ProtoReflect.Descriptor instead.
func (*Decision) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{2}
}

func (x *Decision) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Decision) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Decision) GetPackageId() string {
	if x != nil {
		return x.PackageId
	}
	return ""
}

func (x *Decision) GetPackagePath() string {
	if x != nil {
		return x.PackagePath
	}
	return ""
}

func (x *Decision) GetPackageType() string {
	if x != nil {
		return x.PackageType
	}
	return ""
}

func (x *Decision) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *Decision) GetChoice() []*Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

type Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the choice based on its position in the ordered choice list.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Label or description of the choice.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Choice) Reset() {
	*x = Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{3}
}

func (x *Choice) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Choice) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ProcessingConfigField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string                         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Label  *I18N                          `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Choice []*ProcessingConfigFieldChoice `protobuf:"bytes,4,rep,name=choice,proto3" json:"choice,omitempty"`
}

func (x *ProcessingConfigField) Reset() {
	*x = ProcessingConfigField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingConfigField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingConfigField) ProtoMessage() {}

func (x *ProcessingConfigField) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingConfigField.ProtoReflect.Descriptor instead.
func (*ProcessingConfigField) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ProcessingConfigField) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProcessingConfigField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcessingConfigField) GetLabel() *I18N {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ProcessingConfigField) GetChoice() []*ProcessingConfigFieldChoice {
	if x != nil {
		return x.Choice
	}
	return nil
}

type ProcessingConfigFieldChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     string                                  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Label     *I18N                                   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	AppliesTo []*ProcessingConfigFieldChoiceAppliesTo `protobuf:"bytes,3,rep,name=applies_to,json=appliesTo,proto3" json:"applies_to,omitempty"`
}

func (x *ProcessingConfigFieldChoice) Reset() {
	*x = ProcessingConfigFieldChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingConfigFieldChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingConfigFieldChoice) ProtoMessage() {}

func (x *ProcessingConfigFieldChoice) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingConfigFieldChoice.ProtoReflect.Descriptor instead.
func (*ProcessingConfigFieldChoice) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{5}
}

func (x *ProcessingConfigFieldChoice) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProcessingConfigFieldChoice) GetLabel() *I18N {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ProcessingConfigFieldChoice) GetAppliesTo() []*ProcessingConfigFieldChoiceAppliesTo {
	if x != nil {
		return x.AppliesTo
	}
	return nil
}

type ProcessingConfigFieldChoiceAppliesTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` // E.g. URI, replacement ID, chainID...
	Label  *I18N  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ProcessingConfigFieldChoiceAppliesTo) Reset() {
	*x = ProcessingConfigFieldChoiceAppliesTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingConfigFieldChoiceAppliesTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingConfigFieldChoiceAppliesTo) ProtoMessage() {}

func (x *ProcessingConfigFieldChoiceAppliesTo) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingConfigFieldChoiceAppliesTo.ProtoReflect.Descriptor instead.
func (*ProcessingConfigFieldChoiceAppliesTo) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessingConfigFieldChoiceAppliesTo) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *ProcessingConfigFieldChoiceAppliesTo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ProcessingConfigFieldChoiceAppliesTo) GetLabel() *I18N {
	if x != nil {
		return x.Label
	}
	return nil
}

var File_archivematica_ccp_admin_v1beta1_admin_proto protoreflect.FileDescriptor

var file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x1a, 0x2a,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63,
	0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f,
	0x69, 0x31, 0x38, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x03, 0x0a, 0x07, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x12, 0x36, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x8b, 0x04, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x10, 0xba, 0x48, 0x0d, 0xc8, 0x01, 0x01,
	0x82, 0x01, 0x07, 0x10, 0x01, 0x1a, 0x03, 0x01, 0x02, 0x04, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x29, 0x0a, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x69,
	0x64, 0x64, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x06, 0x6a, 0x6f,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x40, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xce, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x31, 0x38, 0x6e, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x54, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x3b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x49, 0x31, 0x38, 0x6e, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x64, 0x0a, 0x0a,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x45, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x54, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x49, 0x31, 0x38, 0x6e,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2a, 0x8d, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52,
	0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a, 0x49, 0x50, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x5a, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x5a, 0x49, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x41, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x44, 0x49, 0x52,
	0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x49, 0x4d, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x08, 0x2a, 0x88, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x49, 0x50, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x50, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x50,
	0x10, 0x04, 0x2a, 0xd3, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25,
	0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x46, 0x55, 0x4c, 0x4c, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0xaa, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4a,
	0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x04, 0x42, 0xbd, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0a, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x6b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x41, 0xaa, 0x02,
	0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x43,
	0x63, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0xca, 0x02, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xe2, 0x02, 0x2b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x3a, 0x3a, 0x43, 0x63, 0x70, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescOnce sync.Once
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData = file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc
)

func file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescGZIP() []byte {
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescOnce.Do(func() {
		file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData)
	})
	return file_archivematica_ccp_admin_v1beta1_admin_proto_rawDescData
}

var file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes = []any{
	(TransferType)(0),                   // 0: archivematica.ccp.admin.v1beta1.TransferType
	(PackageType)(0),                    // 1: archivematica.ccp.admin.v1beta1.PackageType
	(PackageStatus)(0),                  // 2: archivematica.ccp.admin.v1beta1.PackageStatus
	(JobStatus)(0),                      // 3: archivematica.ccp.admin.v1beta1.JobStatus
	(*Package)(nil),                     // 4: archivematica.ccp.admin.v1beta1.Package
	(*Job)(nil),                         // 5: archivematica.ccp.admin.v1beta1.Job
	(*Decision)(nil),                    // 6: archivematica.ccp.admin.v1beta1.Decision
	(*Choice)(nil),                      // 7: archivematica.ccp.admin.v1beta1.Choice
	(*ProcessingConfigField)(nil),       // 8: archivematica.ccp.admin.v1beta1.ProcessingConfigField
	(*ProcessingConfigFieldChoice)(nil), // 9: archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice
	(*ProcessingConfigFieldChoiceAppliesTo)(nil), // 10: archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo
	(*timestamppb.Timestamp)(nil),                // 11: google.protobuf.Timestamp
	(*I18N)(nil),                                 // 12: archivematica.ccp.admin.v1beta1.I18n
}
var file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs = []int32{
	0,  // 0: archivematica.ccp.admin.v1beta1.Package.type:type_name -> archivematica.ccp.admin.v1beta1.TransferType
	2,  // 1: archivematica.ccp.admin.v1beta1.Package.status:type_name -> archivematica.ccp.admin.v1beta1.PackageStatus
	11, // 2: archivematica.ccp.admin.v1beta1.Package.created_at:type_name -> google.protobuf.Timestamp
	5,  // 3: archivematica.ccp.admin.v1beta1.Package.job:type_name -> archivematica.ccp.admin.v1beta1.Job
	1,  // 4: archivematica.ccp.admin.v1beta1.Job.package_type:type_name -> archivematica.ccp.admin.v1beta1.PackageType
	3,  // 5: archivematica.ccp.admin.v1beta1.Job.status:type_name -> archivematica.ccp.admin.v1beta1.JobStatus
	11, // 6: archivematica.ccp.admin.v1beta1.Job.created_at:type_name -> google.protobuf.Timestamp
	6,  // 7: archivematica.ccp.admin.v1beta1.Job.decision:type_name -> archivematica.ccp.admin.v1beta1.Decision
	7,  // 8: archivematica.ccp.admin.v1beta1.Decision.choice:type_name -> archivematica.ccp.admin.v1beta1.Choice
	12, // 9: archivematica.ccp.admin.v1beta1.ProcessingConfigField.label:type_name -> archivematica.ccp.admin.v1beta1.I18n
	9,  // 10: archivematica.ccp.admin.v1beta1.ProcessingConfigField.choice:type_name -> archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice
	12, // 11: archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice.label:type_name -> archivematica.ccp.admin.v1beta1.I18n
	10, // 12: archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice.applies_to:type_name -> archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo
	12, // 13: archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo.label:type_name -> archivematica.ccp.admin.v1beta1.I18n
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_archivematica_ccp_admin_v1beta1_admin_proto_init() }
func file_archivematica_ccp_admin_v1beta1_admin_proto_init() {
	if File_archivematica_ccp_admin_v1beta1_admin_proto != nil {
		return
	}
	file_archivematica_ccp_admin_v1beta1_i18n_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Decision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessingConfigField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessingConfigFieldChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessingConfigFieldChoiceAppliesTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes,
		DependencyIndexes: file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs,
		EnumInfos:         file_archivematica_ccp_admin_v1beta1_admin_proto_enumTypes,
		MessageInfos:      file_archivematica_ccp_admin_v1beta1_admin_proto_msgTypes,
	}.Build()
	File_archivematica_ccp_admin_v1beta1_admin_proto = out.File
	file_archivematica_ccp_admin_v1beta1_admin_proto_rawDesc = nil
	file_archivematica_ccp_admin_v1beta1_admin_proto_goTypes = nil
	file_archivematica_ccp_admin_v1beta1_admin_proto_depIdxs = nil
}
