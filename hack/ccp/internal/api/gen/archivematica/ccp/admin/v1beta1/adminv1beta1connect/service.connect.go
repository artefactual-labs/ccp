// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: archivematica/ccp/admin/v1beta1/service.proto

package adminv1beta1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1beta1 "github.com/artefactual/archivematica/hack/ccp/internal/api/gen/archivematica/ccp/admin/v1beta1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "archivematica.ccp.admin.v1beta1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceCreatePackageProcedure is the fully-qualified name of the AdminService's
	// CreatePackage RPC.
	AdminServiceCreatePackageProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/CreatePackage"
	// AdminServiceReadPackageProcedure is the fully-qualified name of the AdminService's ReadPackage
	// RPC.
	AdminServiceReadPackageProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ReadPackage"
	// AdminServiceListPackagesProcedure is the fully-qualified name of the AdminService's ListPackages
	// RPC.
	AdminServiceListPackagesProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ListPackages"
	// AdminServiceListDecisionsProcedure is the fully-qualified name of the AdminService's
	// ListDecisions RPC.
	AdminServiceListDecisionsProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ListDecisions"
	// AdminServiceResolveDecisionProcedure is the fully-qualified name of the AdminService's
	// ResolveDecision RPC.
	AdminServiceResolveDecisionProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ResolveDecision"
	// AdminServiceListProcessingConfigurationFieldsProcedure is the fully-qualified name of the
	// AdminService's ListProcessingConfigurationFields RPC.
	AdminServiceListProcessingConfigurationFieldsProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ListProcessingConfigurationFields"
	// AdminServiceApproveJobProcedure is the fully-qualified name of the AdminService's ApproveJob RPC.
	AdminServiceApproveJobProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ApproveJob"
	// AdminServiceApproveTransferByPathProcedure is the fully-qualified name of the AdminService's
	// ApproveTransferByPath RPC.
	AdminServiceApproveTransferByPathProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ApproveTransferByPath"
	// AdminServiceApprovePartialReingestProcedure is the fully-qualified name of the AdminService's
	// ApprovePartialReingest RPC.
	AdminServiceApprovePartialReingestProcedure = "/archivematica.ccp.admin.v1beta1.AdminService/ApprovePartialReingest"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	adminServiceServiceDescriptor                                 = v1beta1.File_archivematica_ccp_admin_v1beta1_service_proto.Services().ByName("AdminService")
	adminServiceCreatePackageMethodDescriptor                     = adminServiceServiceDescriptor.Methods().ByName("CreatePackage")
	adminServiceReadPackageMethodDescriptor                       = adminServiceServiceDescriptor.Methods().ByName("ReadPackage")
	adminServiceListPackagesMethodDescriptor                      = adminServiceServiceDescriptor.Methods().ByName("ListPackages")
	adminServiceListDecisionsMethodDescriptor                     = adminServiceServiceDescriptor.Methods().ByName("ListDecisions")
	adminServiceResolveDecisionMethodDescriptor                   = adminServiceServiceDescriptor.Methods().ByName("ResolveDecision")
	adminServiceListProcessingConfigurationFieldsMethodDescriptor = adminServiceServiceDescriptor.Methods().ByName("ListProcessingConfigurationFields")
	adminServiceApproveJobMethodDescriptor                        = adminServiceServiceDescriptor.Methods().ByName("ApproveJob")
	adminServiceApproveTransferByPathMethodDescriptor             = adminServiceServiceDescriptor.Methods().ByName("ApproveTransferByPath")
	adminServiceApprovePartialReingestMethodDescriptor            = adminServiceServiceDescriptor.Methods().ByName("ApprovePartialReingest")
)

// AdminServiceClient is a client for the archivematica.ccp.admin.v1beta1.AdminService service.
type AdminServiceClient interface {
	// CreatePackage ...
	//
	// It replaces `packageCreate` (_package_create_handler).
	CreatePackage(context.Context, *connect.Request[v1beta1.CreatePackageRequest]) (*connect.Response[v1beta1.CreatePackageResponse], error)
	// ReadPackage ...
	//
	// It replaces `getUnitStatus` (_unit_status_handler).
	ReadPackage(context.Context, *connect.Request[v1beta1.ReadPackageRequest]) (*connect.Response[v1beta1.ReadPackageResponse], error)
	// ListPackage ...
	//
	// It replaces `getUnitsStatuses` (_units_statuses_handler).
	ListPackages(context.Context, *connect.Request[v1beta1.ListPackagesRequest]) (*connect.Response[v1beta1.ListPackagesResponse], error)
	// ListDecisions ...
	//
	// It replaces `getJobsAwaitingApproval` (_job_awaiting_approval_handler).
	ListDecisions(context.Context, *connect.Request[v1beta1.ListDecisionsRequest]) (*connect.Response[v1beta1.ListDecisionsResponse], error)
	// ResolveDecision ...
	ResolveDecision(context.Context, *connect.Request[v1beta1.ResolveDecisionRequest]) (*connect.Response[v1beta1.ResolveDecisionResponse], error)
	// ListProcessingConfigurationFields ...
	//
	// It replaces `getProcessingConfigFields` (_get_processing_config_fields_handler).
	ListProcessingConfigurationFields(context.Context, *connect.Request[v1beta1.ListProcessingConfigurationFieldsRequest]) (*connect.Response[v1beta1.ListProcessingConfigurationFieldsResponse], error)
	// ApproveJob ...
	//
	// It replaces `approveJob` (_job_approve_handler).
	//
	// Deprecated: do not use.
	ApproveJob(context.Context, *connect.Request[v1beta1.ApproveJobRequest]) (*connect.Response[v1beta1.ApproveJobResponse], error)
	// ApproveTransferByPath
	//
	// It replaces `approveTransferByPath` (_approve_transfer_by_path_handler).
	//
	// Deprecated: do not use.
	ApproveTransferByPath(context.Context, *connect.Request[v1beta1.ApproveTransferByPathRequest]) (*connect.Response[v1beta1.ApproveTransferByPathResponse], error)
	// ApprovePartialReingest
	//
	// It replaces `approvePartialReingest` (_approve_partial_reingest_handler).
	//
	// Deprecated: do not use.
	ApprovePartialReingest(context.Context, *connect.Request[v1beta1.ApprovePartialReingestRequest]) (*connect.Response[v1beta1.ApprovePartialReingestResponse], error)
}

// NewAdminServiceClient constructs a client for the archivematica.ccp.admin.v1beta1.AdminService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		createPackage: connect.NewClient[v1beta1.CreatePackageRequest, v1beta1.CreatePackageResponse](
			httpClient,
			baseURL+AdminServiceCreatePackageProcedure,
			connect.WithSchema(adminServiceCreatePackageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		readPackage: connect.NewClient[v1beta1.ReadPackageRequest, v1beta1.ReadPackageResponse](
			httpClient,
			baseURL+AdminServiceReadPackageProcedure,
			connect.WithSchema(adminServiceReadPackageMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listPackages: connect.NewClient[v1beta1.ListPackagesRequest, v1beta1.ListPackagesResponse](
			httpClient,
			baseURL+AdminServiceListPackagesProcedure,
			connect.WithSchema(adminServiceListPackagesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listDecisions: connect.NewClient[v1beta1.ListDecisionsRequest, v1beta1.ListDecisionsResponse](
			httpClient,
			baseURL+AdminServiceListDecisionsProcedure,
			connect.WithSchema(adminServiceListDecisionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		resolveDecision: connect.NewClient[v1beta1.ResolveDecisionRequest, v1beta1.ResolveDecisionResponse](
			httpClient,
			baseURL+AdminServiceResolveDecisionProcedure,
			connect.WithSchema(adminServiceResolveDecisionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listProcessingConfigurationFields: connect.NewClient[v1beta1.ListProcessingConfigurationFieldsRequest, v1beta1.ListProcessingConfigurationFieldsResponse](
			httpClient,
			baseURL+AdminServiceListProcessingConfigurationFieldsProcedure,
			connect.WithSchema(adminServiceListProcessingConfigurationFieldsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		approveJob: connect.NewClient[v1beta1.ApproveJobRequest, v1beta1.ApproveJobResponse](
			httpClient,
			baseURL+AdminServiceApproveJobProcedure,
			connect.WithSchema(adminServiceApproveJobMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		approveTransferByPath: connect.NewClient[v1beta1.ApproveTransferByPathRequest, v1beta1.ApproveTransferByPathResponse](
			httpClient,
			baseURL+AdminServiceApproveTransferByPathProcedure,
			connect.WithSchema(adminServiceApproveTransferByPathMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		approvePartialReingest: connect.NewClient[v1beta1.ApprovePartialReingestRequest, v1beta1.ApprovePartialReingestResponse](
			httpClient,
			baseURL+AdminServiceApprovePartialReingestProcedure,
			connect.WithSchema(adminServiceApprovePartialReingestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	createPackage                     *connect.Client[v1beta1.CreatePackageRequest, v1beta1.CreatePackageResponse]
	readPackage                       *connect.Client[v1beta1.ReadPackageRequest, v1beta1.ReadPackageResponse]
	listPackages                      *connect.Client[v1beta1.ListPackagesRequest, v1beta1.ListPackagesResponse]
	listDecisions                     *connect.Client[v1beta1.ListDecisionsRequest, v1beta1.ListDecisionsResponse]
	resolveDecision                   *connect.Client[v1beta1.ResolveDecisionRequest, v1beta1.ResolveDecisionResponse]
	listProcessingConfigurationFields *connect.Client[v1beta1.ListProcessingConfigurationFieldsRequest, v1beta1.ListProcessingConfigurationFieldsResponse]
	approveJob                        *connect.Client[v1beta1.ApproveJobRequest, v1beta1.ApproveJobResponse]
	approveTransferByPath             *connect.Client[v1beta1.ApproveTransferByPathRequest, v1beta1.ApproveTransferByPathResponse]
	approvePartialReingest            *connect.Client[v1beta1.ApprovePartialReingestRequest, v1beta1.ApprovePartialReingestResponse]
}

// CreatePackage calls archivematica.ccp.admin.v1beta1.AdminService.CreatePackage.
func (c *adminServiceClient) CreatePackage(ctx context.Context, req *connect.Request[v1beta1.CreatePackageRequest]) (*connect.Response[v1beta1.CreatePackageResponse], error) {
	return c.createPackage.CallUnary(ctx, req)
}

// ReadPackage calls archivematica.ccp.admin.v1beta1.AdminService.ReadPackage.
func (c *adminServiceClient) ReadPackage(ctx context.Context, req *connect.Request[v1beta1.ReadPackageRequest]) (*connect.Response[v1beta1.ReadPackageResponse], error) {
	return c.readPackage.CallUnary(ctx, req)
}

// ListPackages calls archivematica.ccp.admin.v1beta1.AdminService.ListPackages.
func (c *adminServiceClient) ListPackages(ctx context.Context, req *connect.Request[v1beta1.ListPackagesRequest]) (*connect.Response[v1beta1.ListPackagesResponse], error) {
	return c.listPackages.CallUnary(ctx, req)
}

// ListDecisions calls archivematica.ccp.admin.v1beta1.AdminService.ListDecisions.
func (c *adminServiceClient) ListDecisions(ctx context.Context, req *connect.Request[v1beta1.ListDecisionsRequest]) (*connect.Response[v1beta1.ListDecisionsResponse], error) {
	return c.listDecisions.CallUnary(ctx, req)
}

// ResolveDecision calls archivematica.ccp.admin.v1beta1.AdminService.ResolveDecision.
func (c *adminServiceClient) ResolveDecision(ctx context.Context, req *connect.Request[v1beta1.ResolveDecisionRequest]) (*connect.Response[v1beta1.ResolveDecisionResponse], error) {
	return c.resolveDecision.CallUnary(ctx, req)
}

// ListProcessingConfigurationFields calls
// archivematica.ccp.admin.v1beta1.AdminService.ListProcessingConfigurationFields.
func (c *adminServiceClient) ListProcessingConfigurationFields(ctx context.Context, req *connect.Request[v1beta1.ListProcessingConfigurationFieldsRequest]) (*connect.Response[v1beta1.ListProcessingConfigurationFieldsResponse], error) {
	return c.listProcessingConfigurationFields.CallUnary(ctx, req)
}

// ApproveJob calls archivematica.ccp.admin.v1beta1.AdminService.ApproveJob.
//
// Deprecated: do not use.
func (c *adminServiceClient) ApproveJob(ctx context.Context, req *connect.Request[v1beta1.ApproveJobRequest]) (*connect.Response[v1beta1.ApproveJobResponse], error) {
	return c.approveJob.CallUnary(ctx, req)
}

// ApproveTransferByPath calls archivematica.ccp.admin.v1beta1.AdminService.ApproveTransferByPath.
//
// Deprecated: do not use.
func (c *adminServiceClient) ApproveTransferByPath(ctx context.Context, req *connect.Request[v1beta1.ApproveTransferByPathRequest]) (*connect.Response[v1beta1.ApproveTransferByPathResponse], error) {
	return c.approveTransferByPath.CallUnary(ctx, req)
}

// ApprovePartialReingest calls archivematica.ccp.admin.v1beta1.AdminService.ApprovePartialReingest.
//
// Deprecated: do not use.
func (c *adminServiceClient) ApprovePartialReingest(ctx context.Context, req *connect.Request[v1beta1.ApprovePartialReingestRequest]) (*connect.Response[v1beta1.ApprovePartialReingestResponse], error) {
	return c.approvePartialReingest.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the archivematica.ccp.admin.v1beta1.AdminService
// service.
type AdminServiceHandler interface {
	// CreatePackage ...
	//
	// It replaces `packageCreate` (_package_create_handler).
	CreatePackage(context.Context, *connect.Request[v1beta1.CreatePackageRequest]) (*connect.Response[v1beta1.CreatePackageResponse], error)
	// ReadPackage ...
	//
	// It replaces `getUnitStatus` (_unit_status_handler).
	ReadPackage(context.Context, *connect.Request[v1beta1.ReadPackageRequest]) (*connect.Response[v1beta1.ReadPackageResponse], error)
	// ListPackage ...
	//
	// It replaces `getUnitsStatuses` (_units_statuses_handler).
	ListPackages(context.Context, *connect.Request[v1beta1.ListPackagesRequest]) (*connect.Response[v1beta1.ListPackagesResponse], error)
	// ListDecisions ...
	//
	// It replaces `getJobsAwaitingApproval` (_job_awaiting_approval_handler).
	ListDecisions(context.Context, *connect.Request[v1beta1.ListDecisionsRequest]) (*connect.Response[v1beta1.ListDecisionsResponse], error)
	// ResolveDecision ...
	ResolveDecision(context.Context, *connect.Request[v1beta1.ResolveDecisionRequest]) (*connect.Response[v1beta1.ResolveDecisionResponse], error)
	// ListProcessingConfigurationFields ...
	//
	// It replaces `getProcessingConfigFields` (_get_processing_config_fields_handler).
	ListProcessingConfigurationFields(context.Context, *connect.Request[v1beta1.ListProcessingConfigurationFieldsRequest]) (*connect.Response[v1beta1.ListProcessingConfigurationFieldsResponse], error)
	// ApproveJob ...
	//
	// It replaces `approveJob` (_job_approve_handler).
	//
	// Deprecated: do not use.
	ApproveJob(context.Context, *connect.Request[v1beta1.ApproveJobRequest]) (*connect.Response[v1beta1.ApproveJobResponse], error)
	// ApproveTransferByPath
	//
	// It replaces `approveTransferByPath` (_approve_transfer_by_path_handler).
	//
	// Deprecated: do not use.
	ApproveTransferByPath(context.Context, *connect.Request[v1beta1.ApproveTransferByPathRequest]) (*connect.Response[v1beta1.ApproveTransferByPathResponse], error)
	// ApprovePartialReingest
	//
	// It replaces `approvePartialReingest` (_approve_partial_reingest_handler).
	//
	// Deprecated: do not use.
	ApprovePartialReingest(context.Context, *connect.Request[v1beta1.ApprovePartialReingestRequest]) (*connect.Response[v1beta1.ApprovePartialReingestResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	adminServiceCreatePackageHandler := connect.NewUnaryHandler(
		AdminServiceCreatePackageProcedure,
		svc.CreatePackage,
		connect.WithSchema(adminServiceCreatePackageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceReadPackageHandler := connect.NewUnaryHandler(
		AdminServiceReadPackageProcedure,
		svc.ReadPackage,
		connect.WithSchema(adminServiceReadPackageMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListPackagesHandler := connect.NewUnaryHandler(
		AdminServiceListPackagesProcedure,
		svc.ListPackages,
		connect.WithSchema(adminServiceListPackagesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListDecisionsHandler := connect.NewUnaryHandler(
		AdminServiceListDecisionsProcedure,
		svc.ListDecisions,
		connect.WithSchema(adminServiceListDecisionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceResolveDecisionHandler := connect.NewUnaryHandler(
		AdminServiceResolveDecisionProcedure,
		svc.ResolveDecision,
		connect.WithSchema(adminServiceResolveDecisionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceListProcessingConfigurationFieldsHandler := connect.NewUnaryHandler(
		AdminServiceListProcessingConfigurationFieldsProcedure,
		svc.ListProcessingConfigurationFields,
		connect.WithSchema(adminServiceListProcessingConfigurationFieldsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceApproveJobHandler := connect.NewUnaryHandler(
		AdminServiceApproveJobProcedure,
		svc.ApproveJob,
		connect.WithSchema(adminServiceApproveJobMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceApproveTransferByPathHandler := connect.NewUnaryHandler(
		AdminServiceApproveTransferByPathProcedure,
		svc.ApproveTransferByPath,
		connect.WithSchema(adminServiceApproveTransferByPathMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	adminServiceApprovePartialReingestHandler := connect.NewUnaryHandler(
		AdminServiceApprovePartialReingestProcedure,
		svc.ApprovePartialReingest,
		connect.WithSchema(adminServiceApprovePartialReingestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/archivematica.ccp.admin.v1beta1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceCreatePackageProcedure:
			adminServiceCreatePackageHandler.ServeHTTP(w, r)
		case AdminServiceReadPackageProcedure:
			adminServiceReadPackageHandler.ServeHTTP(w, r)
		case AdminServiceListPackagesProcedure:
			adminServiceListPackagesHandler.ServeHTTP(w, r)
		case AdminServiceListDecisionsProcedure:
			adminServiceListDecisionsHandler.ServeHTTP(w, r)
		case AdminServiceResolveDecisionProcedure:
			adminServiceResolveDecisionHandler.ServeHTTP(w, r)
		case AdminServiceListProcessingConfigurationFieldsProcedure:
			adminServiceListProcessingConfigurationFieldsHandler.ServeHTTP(w, r)
		case AdminServiceApproveJobProcedure:
			adminServiceApproveJobHandler.ServeHTTP(w, r)
		case AdminServiceApproveTransferByPathProcedure:
			adminServiceApproveTransferByPathHandler.ServeHTTP(w, r)
		case AdminServiceApprovePartialReingestProcedure:
			adminServiceApprovePartialReingestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) CreatePackage(context.Context, *connect.Request[v1beta1.CreatePackageRequest]) (*connect.Response[v1beta1.CreatePackageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.CreatePackage is not implemented"))
}

func (UnimplementedAdminServiceHandler) ReadPackage(context.Context, *connect.Request[v1beta1.ReadPackageRequest]) (*connect.Response[v1beta1.ReadPackageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ReadPackage is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListPackages(context.Context, *connect.Request[v1beta1.ListPackagesRequest]) (*connect.Response[v1beta1.ListPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ListPackages is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListDecisions(context.Context, *connect.Request[v1beta1.ListDecisionsRequest]) (*connect.Response[v1beta1.ListDecisionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ListDecisions is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResolveDecision(context.Context, *connect.Request[v1beta1.ResolveDecisionRequest]) (*connect.Response[v1beta1.ResolveDecisionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ResolveDecision is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProcessingConfigurationFields(context.Context, *connect.Request[v1beta1.ListProcessingConfigurationFieldsRequest]) (*connect.Response[v1beta1.ListProcessingConfigurationFieldsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ListProcessingConfigurationFields is not implemented"))
}

func (UnimplementedAdminServiceHandler) ApproveJob(context.Context, *connect.Request[v1beta1.ApproveJobRequest]) (*connect.Response[v1beta1.ApproveJobResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ApproveJob is not implemented"))
}

func (UnimplementedAdminServiceHandler) ApproveTransferByPath(context.Context, *connect.Request[v1beta1.ApproveTransferByPathRequest]) (*connect.Response[v1beta1.ApproveTransferByPathResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ApproveTransferByPath is not implemented"))
}

func (UnimplementedAdminServiceHandler) ApprovePartialReingest(context.Context, *connect.Request[v1beta1.ApprovePartialReingestRequest]) (*connect.Response[v1beta1.ApprovePartialReingestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("archivematica.ccp.admin.v1beta1.AdminService.ApprovePartialReingest is not implemented"))
}
