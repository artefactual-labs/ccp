// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package sqlcmysql

import (
	"context"
	"database/sql"
	"time"

	uuid "github.com/google/uuid"
)

const cleanUpActiveJobs = `-- name: CleanUpActiveJobs :exec
UPDATE Jobs SET currentStep = 4 WHERE currentStep = 3
`

func (q *Queries) CleanUpActiveJobs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveJobsStmt, cleanUpActiveJobs)
	return err
}

const cleanUpActiveSIPs = `-- name: CleanUpActiveSIPs :exec
UPDATE SIPs SET status = 4, completed_at = UTC_TIMESTAMP() WHERE status IN (0, 1)
`

func (q *Queries) CleanUpActiveSIPs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveSIPsStmt, cleanUpActiveSIPs)
	return err
}

const cleanUpActiveTasks = `-- name: CleanUpActiveTasks :exec
UPDATE Tasks SET exitCode = -1, stdError = "MCP shut down while processing." WHERE exitCode IS NULL
`

func (q *Queries) CleanUpActiveTasks(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveTasksStmt, cleanUpActiveTasks)
	return err
}

const cleanUpActiveTransfers = `-- name: CleanUpActiveTransfers :exec
UPDATE Transfers SET status = 4, completed_at = UTC_TIMESTAMP() WHERE status IN (0, 1)
`

func (q *Queries) CleanUpActiveTransfers(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpActiveTransfersStmt, cleanUpActiveTransfers)
	return err
}

const cleanUpAwaitingJobs = `-- name: CleanUpAwaitingJobs :exec
DELETE FROM Jobs WHERE currentStep = 1
`

func (q *Queries) CleanUpAwaitingJobs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpAwaitingJobsStmt, cleanUpAwaitingJobs)
	return err
}

const cleanUpTasksWithAwaitingJobs = `-- name: CleanUpTasksWithAwaitingJobs :exec
DELETE FROM Tasks WHERE jobuuid IN (SELECT jobUUID FROM Jobs WHERE currentStep = 1)
`

func (q *Queries) CleanUpTasksWithAwaitingJobs(ctx context.Context) error {
	_, err := q.exec(ctx, q.cleanUpTasksWithAwaitingJobsStmt, cleanUpTasksWithAwaitingJobs)
	return err
}

const createJob = `-- name: CreateJob :exec
INSERT INTO Jobs (jobUUID, jobType, createdTime, createdTimeDec, directory, SIPUUID, unitType, currentStep, microserviceGroup, hidden, MicroServiceChainLinksPK, subJobOf) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateJobParams struct {
	ID                       uuid.UUID
	Type                     string
	CreatedAt                time.Time
	Createdtimedec           string
	Directory                string
	SIPID                    uuid.UUID
	Unittype                 string
	Currentstep              int32
	Microservicegroup        string
	Hidden                   bool
	Microservicechainlinkspk sql.NullString
	Subjobof                 string
}

func (q *Queries) CreateJob(ctx context.Context, arg *CreateJobParams) error {
	_, err := q.exec(ctx, q.createJobStmt, createJob,
		arg.ID,
		arg.Type,
		arg.CreatedAt,
		arg.Createdtimedec,
		arg.Directory,
		arg.SIPID,
		arg.Unittype,
		arg.Currentstep,
		arg.Microservicegroup,
		arg.Hidden,
		arg.Microservicechainlinkspk,
		arg.Subjobof,
	)
	return err
}

const createTransfer = `-- name: CreateTransfer :exec
INSERT INTO Transfers (transferUUID, currentLocation) VALUES (?, ?)
`

type CreateTransferParams struct {
	Transferuuid    uuid.UUID
	Currentlocation string
}

func (q *Queries) CreateTransfer(ctx context.Context, arg *CreateTransferParams) error {
	_, err := q.exec(ctx, q.createTransferStmt, createTransfer, arg.Transferuuid, arg.Currentlocation)
	return err
}

const createWorkflowUnitVariable = `-- name: CreateWorkflowUnitVariable :exec
INSERT INTO UnitVariables (unitType, unitUUID, variable, variableValue, microServiceChainLink) VALUES (?, ?, ?, ?, ?)
ON DUPLICATE KEY UPDATE variableValue = VALUES(variableValue), microServiceChainLink = VALUES(microServiceChainLink)
`

type CreateWorkflowUnitVariableParams struct {
	Unittype              sql.NullString
	Unituuid              uuid.UUID
	Variable              sql.NullString
	Variablevalue         sql.NullString
	Microservicechainlink sql.NullString
}

func (q *Queries) CreateWorkflowUnitVariable(ctx context.Context, arg *CreateWorkflowUnitVariableParams) error {
	_, err := q.exec(ctx, q.createWorkflowUnitVariableStmt, createWorkflowUnitVariable,
		arg.Unittype,
		arg.Unituuid,
		arg.Variable,
		arg.Variablevalue,
		arg.Microservicechainlink,
	)
	return err
}

const getLock = `-- name: GetLock :one
SELECT COALESCE(GET_LOCK('lock', 0), 0)
`

func (q *Queries) GetLock(ctx context.Context) (interface{}, error) {
	row := q.queryRow(ctx, q.getLockStmt, getLock)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const readTransferLocation = `-- name: ReadTransferLocation :one
SELECT transferUUID, currentLocation FROM Transfers WHERE transferUUID = ?
`

type ReadTransferLocationRow struct {
	Transferuuid    uuid.UUID
	Currentlocation string
}

func (q *Queries) ReadTransferLocation(ctx context.Context, transferuuid uuid.UUID) (*ReadTransferLocationRow, error) {
	row := q.queryRow(ctx, q.readTransferLocationStmt, readTransferLocation, transferuuid)
	var i ReadTransferLocationRow
	err := row.Scan(&i.Transferuuid, &i.Currentlocation)
	return &i, err
}

const readTransferWithLocation = `-- name: ReadTransferWithLocation :one
SELECT transferUUID FROM Transfers WHERE currentLocation = ?
`

func (q *Queries) ReadTransferWithLocation(ctx context.Context, currentlocation string) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.readTransferWithLocationStmt, readTransferWithLocation, currentlocation)
	var transferuuid uuid.UUID
	err := row.Scan(&transferuuid)
	return transferuuid, err
}

const readWorkflowUnitVariable = `-- name: ReadWorkflowUnitVariable :one
SELECT microServiceChainLink FROM UnitVariables WHERE unitType = ? AND unitUUID = ? AND variable = ?
`

type ReadWorkflowUnitVariableParams struct {
	Unittype sql.NullString
	Unituuid uuid.UUID
	Variable sql.NullString
}

func (q *Queries) ReadWorkflowUnitVariable(ctx context.Context, arg *ReadWorkflowUnitVariableParams) (sql.NullString, error) {
	row := q.queryRow(ctx, q.readWorkflowUnitVariableStmt, readWorkflowUnitVariable, arg.Unittype, arg.Unituuid, arg.Variable)
	var microservicechainlink sql.NullString
	err := row.Scan(&microservicechainlink)
	return microservicechainlink, err
}

const releaseLock = `-- name: ReleaseLock :one
SELECT RELEASE_LOCK('lock')
`

func (q *Queries) ReleaseLock(ctx context.Context) (bool, error) {
	row := q.queryRow(ctx, q.releaseLockStmt, releaseLock)
	var release_lock bool
	err := row.Scan(&release_lock)
	return release_lock, err
}

const updateJobStatus = `-- name: UpdateJobStatus :exec
UPDATE Jobs SET currentStep = ? WHERE jobUUID = ?
`

type UpdateJobStatusParams struct {
	Currentstep int32
	ID          uuid.UUID
}

func (q *Queries) UpdateJobStatus(ctx context.Context, arg *UpdateJobStatusParams) error {
	_, err := q.exec(ctx, q.updateJobStatusStmt, updateJobStatus, arg.Currentstep, arg.ID)
	return err
}

const updateTransferLocation = `-- name: UpdateTransferLocation :exec
UPDATE Transfers SET currentLocation = ? WHERE transferUUID = ?
`

type UpdateTransferLocationParams struct {
	Currentlocation string
	Transferuuid    uuid.UUID
}

func (q *Queries) UpdateTransferLocation(ctx context.Context, arg *UpdateTransferLocationParams) error {
	_, err := q.exec(ctx, q.updateTransferLocationStmt, updateTransferLocation, arg.Currentlocation, arg.Transferuuid)
	return err
}
