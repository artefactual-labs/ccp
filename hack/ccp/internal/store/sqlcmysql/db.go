// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sqlcmysql

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cleanUpActiveJobsStmt, err = db.PrepareContext(ctx, cleanUpActiveJobs); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpActiveJobs: %w", err)
	}
	if q.cleanUpActiveSIPsStmt, err = db.PrepareContext(ctx, cleanUpActiveSIPs); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpActiveSIPs: %w", err)
	}
	if q.cleanUpActiveTasksStmt, err = db.PrepareContext(ctx, cleanUpActiveTasks); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpActiveTasks: %w", err)
	}
	if q.cleanUpActiveTransfersStmt, err = db.PrepareContext(ctx, cleanUpActiveTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpActiveTransfers: %w", err)
	}
	if q.cleanUpAwaitingJobsStmt, err = db.PrepareContext(ctx, cleanUpAwaitingJobs); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpAwaitingJobs: %w", err)
	}
	if q.cleanUpTasksWithAwaitingJobsStmt, err = db.PrepareContext(ctx, cleanUpTasksWithAwaitingJobs); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpTasksWithAwaitingJobs: %w", err)
	}
	if q.createJobStmt, err = db.PrepareContext(ctx, createJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateJob: %w", err)
	}
	if q.createSIPStmt, err = db.PrepareContext(ctx, createSIP); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSIP: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.createUnitVarStmt, err = db.PrepareContext(ctx, createUnitVar); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUnitVar: %w", err)
	}
	if q.readDashboardSettingStmt, err = db.PrepareContext(ctx, readDashboardSetting); err != nil {
		return nil, fmt.Errorf("error preparing query ReadDashboardSetting: %w", err)
	}
	if q.readDashboardSettingsWithNameLikeStmt, err = db.PrepareContext(ctx, readDashboardSettingsWithNameLike); err != nil {
		return nil, fmt.Errorf("error preparing query ReadDashboardSettingsWithNameLike: %w", err)
	}
	if q.readDashboardSettingsWithScopeStmt, err = db.PrepareContext(ctx, readDashboardSettingsWithScope); err != nil {
		return nil, fmt.Errorf("error preparing query ReadDashboardSettingsWithScope: %w", err)
	}
	if q.readSIPStmt, err = db.PrepareContext(ctx, readSIP); err != nil {
		return nil, fmt.Errorf("error preparing query ReadSIP: %w", err)
	}
	if q.readSIPLocationStmt, err = db.PrepareContext(ctx, readSIPLocation); err != nil {
		return nil, fmt.Errorf("error preparing query ReadSIPLocation: %w", err)
	}
	if q.readSIPWithLocationStmt, err = db.PrepareContext(ctx, readSIPWithLocation); err != nil {
		return nil, fmt.Errorf("error preparing query ReadSIPWithLocation: %w", err)
	}
	if q.readTransferStmt, err = db.PrepareContext(ctx, readTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query ReadTransfer: %w", err)
	}
	if q.readTransferLocationStmt, err = db.PrepareContext(ctx, readTransferLocation); err != nil {
		return nil, fmt.Errorf("error preparing query ReadTransferLocation: %w", err)
	}
	if q.readTransferWithLocationStmt, err = db.PrepareContext(ctx, readTransferWithLocation); err != nil {
		return nil, fmt.Errorf("error preparing query ReadTransferWithLocation: %w", err)
	}
	if q.readUnitVarStmt, err = db.PrepareContext(ctx, readUnitVar); err != nil {
		return nil, fmt.Errorf("error preparing query ReadUnitVar: %w", err)
	}
	if q.readUnitVarsStmt, err = db.PrepareContext(ctx, readUnitVars); err != nil {
		return nil, fmt.Errorf("error preparing query ReadUnitVars: %w", err)
	}
	if q.updateJobStatusStmt, err = db.PrepareContext(ctx, updateJobStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateJobStatus: %w", err)
	}
	if q.updateSIPLocationStmt, err = db.PrepareContext(ctx, updateSIPLocation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSIPLocation: %w", err)
	}
	if q.updateSIPStatusStmt, err = db.PrepareContext(ctx, updateSIPStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSIPStatus: %w", err)
	}
	if q.updateTransferLocationStmt, err = db.PrepareContext(ctx, updateTransferLocation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransferLocation: %w", err)
	}
	if q.updateTransferStatusStmt, err = db.PrepareContext(ctx, updateTransferStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTransferStatus: %w", err)
	}
	if q.updateUnitVarStmt, err = db.PrepareContext(ctx, updateUnitVar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUnitVar: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cleanUpActiveJobsStmt != nil {
		if cerr := q.cleanUpActiveJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpActiveJobsStmt: %w", cerr)
		}
	}
	if q.cleanUpActiveSIPsStmt != nil {
		if cerr := q.cleanUpActiveSIPsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpActiveSIPsStmt: %w", cerr)
		}
	}
	if q.cleanUpActiveTasksStmt != nil {
		if cerr := q.cleanUpActiveTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpActiveTasksStmt: %w", cerr)
		}
	}
	if q.cleanUpActiveTransfersStmt != nil {
		if cerr := q.cleanUpActiveTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpActiveTransfersStmt: %w", cerr)
		}
	}
	if q.cleanUpAwaitingJobsStmt != nil {
		if cerr := q.cleanUpAwaitingJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpAwaitingJobsStmt: %w", cerr)
		}
	}
	if q.cleanUpTasksWithAwaitingJobsStmt != nil {
		if cerr := q.cleanUpTasksWithAwaitingJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpTasksWithAwaitingJobsStmt: %w", cerr)
		}
	}
	if q.createJobStmt != nil {
		if cerr := q.createJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createJobStmt: %w", cerr)
		}
	}
	if q.createSIPStmt != nil {
		if cerr := q.createSIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSIPStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.createUnitVarStmt != nil {
		if cerr := q.createUnitVarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUnitVarStmt: %w", cerr)
		}
	}
	if q.readDashboardSettingStmt != nil {
		if cerr := q.readDashboardSettingStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readDashboardSettingStmt: %w", cerr)
		}
	}
	if q.readDashboardSettingsWithNameLikeStmt != nil {
		if cerr := q.readDashboardSettingsWithNameLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readDashboardSettingsWithNameLikeStmt: %w", cerr)
		}
	}
	if q.readDashboardSettingsWithScopeStmt != nil {
		if cerr := q.readDashboardSettingsWithScopeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readDashboardSettingsWithScopeStmt: %w", cerr)
		}
	}
	if q.readSIPStmt != nil {
		if cerr := q.readSIPStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readSIPStmt: %w", cerr)
		}
	}
	if q.readSIPLocationStmt != nil {
		if cerr := q.readSIPLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readSIPLocationStmt: %w", cerr)
		}
	}
	if q.readSIPWithLocationStmt != nil {
		if cerr := q.readSIPWithLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readSIPWithLocationStmt: %w", cerr)
		}
	}
	if q.readTransferStmt != nil {
		if cerr := q.readTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readTransferStmt: %w", cerr)
		}
	}
	if q.readTransferLocationStmt != nil {
		if cerr := q.readTransferLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readTransferLocationStmt: %w", cerr)
		}
	}
	if q.readTransferWithLocationStmt != nil {
		if cerr := q.readTransferWithLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readTransferWithLocationStmt: %w", cerr)
		}
	}
	if q.readUnitVarStmt != nil {
		if cerr := q.readUnitVarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readUnitVarStmt: %w", cerr)
		}
	}
	if q.readUnitVarsStmt != nil {
		if cerr := q.readUnitVarsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing readUnitVarsStmt: %w", cerr)
		}
	}
	if q.updateJobStatusStmt != nil {
		if cerr := q.updateJobStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateJobStatusStmt: %w", cerr)
		}
	}
	if q.updateSIPLocationStmt != nil {
		if cerr := q.updateSIPLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSIPLocationStmt: %w", cerr)
		}
	}
	if q.updateSIPStatusStmt != nil {
		if cerr := q.updateSIPStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSIPStatusStmt: %w", cerr)
		}
	}
	if q.updateTransferLocationStmt != nil {
		if cerr := q.updateTransferLocationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransferLocationStmt: %w", cerr)
		}
	}
	if q.updateTransferStatusStmt != nil {
		if cerr := q.updateTransferStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTransferStatusStmt: %w", cerr)
		}
	}
	if q.updateUnitVarStmt != nil {
		if cerr := q.updateUnitVarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUnitVarStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                    DBTX
	tx                                    *sql.Tx
	cleanUpActiveJobsStmt                 *sql.Stmt
	cleanUpActiveSIPsStmt                 *sql.Stmt
	cleanUpActiveTasksStmt                *sql.Stmt
	cleanUpActiveTransfersStmt            *sql.Stmt
	cleanUpAwaitingJobsStmt               *sql.Stmt
	cleanUpTasksWithAwaitingJobsStmt      *sql.Stmt
	createJobStmt                         *sql.Stmt
	createSIPStmt                         *sql.Stmt
	createTransferStmt                    *sql.Stmt
	createUnitVarStmt                     *sql.Stmt
	readDashboardSettingStmt              *sql.Stmt
	readDashboardSettingsWithNameLikeStmt *sql.Stmt
	readDashboardSettingsWithScopeStmt    *sql.Stmt
	readSIPStmt                           *sql.Stmt
	readSIPLocationStmt                   *sql.Stmt
	readSIPWithLocationStmt               *sql.Stmt
	readTransferStmt                      *sql.Stmt
	readTransferLocationStmt              *sql.Stmt
	readTransferWithLocationStmt          *sql.Stmt
	readUnitVarStmt                       *sql.Stmt
	readUnitVarsStmt                      *sql.Stmt
	updateJobStatusStmt                   *sql.Stmt
	updateSIPLocationStmt                 *sql.Stmt
	updateSIPStatusStmt                   *sql.Stmt
	updateTransferLocationStmt            *sql.Stmt
	updateTransferStatusStmt              *sql.Stmt
	updateUnitVarStmt                     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                    tx,
		tx:                                    tx,
		cleanUpActiveJobsStmt:                 q.cleanUpActiveJobsStmt,
		cleanUpActiveSIPsStmt:                 q.cleanUpActiveSIPsStmt,
		cleanUpActiveTasksStmt:                q.cleanUpActiveTasksStmt,
		cleanUpActiveTransfersStmt:            q.cleanUpActiveTransfersStmt,
		cleanUpAwaitingJobsStmt:               q.cleanUpAwaitingJobsStmt,
		cleanUpTasksWithAwaitingJobsStmt:      q.cleanUpTasksWithAwaitingJobsStmt,
		createJobStmt:                         q.createJobStmt,
		createSIPStmt:                         q.createSIPStmt,
		createTransferStmt:                    q.createTransferStmt,
		createUnitVarStmt:                     q.createUnitVarStmt,
		readDashboardSettingStmt:              q.readDashboardSettingStmt,
		readDashboardSettingsWithNameLikeStmt: q.readDashboardSettingsWithNameLikeStmt,
		readDashboardSettingsWithScopeStmt:    q.readDashboardSettingsWithScopeStmt,
		readSIPStmt:                           q.readSIPStmt,
		readSIPLocationStmt:                   q.readSIPLocationStmt,
		readSIPWithLocationStmt:               q.readSIPWithLocationStmt,
		readTransferStmt:                      q.readTransferStmt,
		readTransferLocationStmt:              q.readTransferLocationStmt,
		readTransferWithLocationStmt:          q.readTransferWithLocationStmt,
		readUnitVarStmt:                       q.readUnitVarStmt,
		readUnitVarsStmt:                      q.readUnitVarsStmt,
		updateJobStatusStmt:                   q.updateJobStatusStmt,
		updateSIPLocationStmt:                 q.updateSIPLocationStmt,
		updateSIPStatusStmt:                   q.updateSIPStatusStmt,
		updateTransferLocationStmt:            q.updateTransferLocationStmt,
		updateTransferStatusStmt:              q.updateTransferStatusStmt,
		updateUnitVarStmt:                     q.updateUnitVarStmt,
	}
}
