//go:build go1.22

// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for DurationString.
const (
	DurationStringEmpty        DurationString = ""
	DurationStringLowerThanOne DurationString = "< 1"
)

// Defines values for TransferType.
const (
	TransferTypeDataverse   TransferType = "dataverse"
	TransferTypeDspace      TransferType = "dspace"
	TransferTypeMaildir     TransferType = "maildir"
	TransferTypeStandard    TransferType = "standard"
	TransferTypeTRIM        TransferType = "TRIM"
	TransferTypeUnzippedBag TransferType = "unzipped bag"
	TransferTypeZipfile     TransferType = "zipfile"
	TransferTypeZippedBag   TransferType = "zipped bag"
)

// Defines values for UnitStatus.
const (
	UnitStatusCOMPLETE   UnitStatus = "COMPLETE"
	UnitStatusFAILED     UnitStatus = "FAILED"
	UnitStatusPROCESSING UnitStatus = "PROCESSING"
	UnitStatusREJECTED   UnitStatus = "REJECTED"
	UnitStatusUSERINPUT  UnitStatus = "USER_INPUT"
)

// Defines values for V1IngestReadResponseSIPUUID1.
const (
	V1IngestReadResponseSIPUUID1BACKLOG V1IngestReadResponseSIPUUID1 = "BACKLOG"
)

// Defines values for V1IngestReadResponseType.
const (
	V1IngestReadResponseTypeSIP V1IngestReadResponseType = "SIP"
)

// Defines values for V1TransferReadResponseSIPUUID1.
const (
	V1TransferReadResponseSIPUUID1BACKLOG V1TransferReadResponseSIPUUID1 = "BACKLOG"
)

// Defines values for V1TransferReadResponseType.
const (
	V1TransferReadResponseTypeTransfer V1TransferReadResponseType = "transfer"
)

// Defines values for V2BetaJobsJobStatus.
const (
	V2BetaJobsJobStatusCOMPLETE   V2BetaJobsJobStatus = "COMPLETE"
	V2BetaJobsJobStatusFAILED     V2BetaJobsJobStatus = "FAILED"
	V2BetaJobsJobStatusPROCESSING V2BetaJobsJobStatus = "PROCESSING"
	V2BetaJobsJobStatusUNKNOWN    V2BetaJobsJobStatus = "UNKNOWN"
	V2BetaJobsJobStatusUSERINPUT  V2BetaJobsJobStatus = "USER_INPUT"
)

// Defines values for V2BetaValidateValidator.
const (
	V2BetaValidateValidatorAvalon V2BetaValidateValidator = "avalon"
	V2BetaValidateValidatorRights V2BetaValidateValidator = "rights"
)

// Defines values for ProcessingConfigurationReadParamsAccept.
const (
	ProcessingConfigurationReadParamsAcceptApplicationXML ProcessingConfigurationReadParamsAccept = "application/xml"
	ProcessingConfigurationReadParamsAcceptAsterisk       ProcessingConfigurationReadParamsAccept = "*/*"
	ProcessingConfigurationReadParamsAcceptTextXML        ProcessingConfigurationReadParamsAccept = "text/xml"
)

// DurationString defines model for DurationString.
type DurationString string

// Error defines model for Error.
type Error struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

// NotRemoved defines model for NotRemoved.
type NotRemoved struct {
	Removed bool `json:"removed"`
}

// Removed defines model for Removed.
type Removed struct {
	Removed bool `json:"removed"`
}

// Success defines model for Success.
type Success struct {
	Success bool `json:"success"`
}

// TransferType defines model for TransferType.
type TransferType string

// UnitStatus defines model for UnitStatus.
type UnitStatus string

// V1IngestReadResponse defines model for V1.Ingest.ReadResponse.
type V1IngestReadResponse struct {
	Directory    string                        `json:"directory"`
	Microservice string                        `json:"microservice"`
	Name         string                        `json:"name"`
	SIPUUID      *V1IngestReadResponse_SIPUUID `json:"sip_uuid,omitempty"`
	Status       UnitStatus                    `json:"status"`
	Type         V1IngestReadResponseType      `json:"type"`
	UUID         UUID                          `json:"uuid"`
}

// V1IngestReadResponseSIPUUID1 defines model for V1IngestReadResponse.SIPUUID.1.
type V1IngestReadResponseSIPUUID1 string

// V1IngestReadResponse_SIPUUID defines model for V1IngestReadResponse.SIPUUID.
type V1IngestReadResponse_SIPUUID struct {
	union json.RawMessage
}

// V1IngestReadResponseType defines model for V1IngestReadResponse.Type.
type V1IngestReadResponseType string

// V1IngestReingestResponse defines model for V1.Ingest.ReingestResponse.
type V1IngestReingestResponse struct {
	Error        *bool  `json:"error,omitempty"`
	Message      string `json:"message"`
	ReingestUUID UUID   `json:"reingest_uuid"`
}

// V1IngestWaiting defines model for V1.Ingest.Waiting.
type V1IngestWaiting struct {
	Microservice string `json:"microservice"`
	SIPDirectory string `json:"sip_directory"`
	SIPName      string `json:"sip_name"`
	SIPUUID      UUID   `json:"sip_uuid"`
}

// V1TransferApproveTransferResponse defines model for V1.Transfer.ApproveTransferResponse.
type V1TransferApproveTransferResponse struct {
	Error   *bool  `json:"error,omitempty"`
	Message string `json:"message"`
	UUID    UUID   `json:"uuid"`
}

// V1TransferReadResponse defines model for V1.Transfer.ReadResponse.
type V1TransferReadResponse struct {
	Directory    string                          `json:"directory"`
	Microservice string                          `json:"microservice"`
	Name         string                          `json:"name"`
	SIPUUID      *V1TransferReadResponse_SIPUUID `json:"sip_uuid,omitempty"`
	Status       UnitStatus                      `json:"status"`
	Type         V1TransferReadResponseType      `json:"type"`
	UUID         UUID                            `json:"uuid"`
}

// V1TransferReadResponseSIPUUID1 defines model for V1TransferReadResponse.SIPUUID.1.
type V1TransferReadResponseSIPUUID1 string

// V1TransferReadResponse_SIPUUID defines model for V1TransferReadResponse.SIPUUID.
type V1TransferReadResponse_SIPUUID struct {
	union json.RawMessage
}

// V1TransferReadResponseType defines model for V1TransferReadResponse.Type.
type V1TransferReadResponseType string

// V1TransferReingestResponse defines model for V1.Transfer.ReingestResponse.
type V1TransferReingestResponse struct {
	Error        *bool  `json:"error,omitempty"`
	Message      string `json:"message"`
	ReingestUUID UUID   `json:"reingest_uuid"`
}

// V1TransferStartTransferResponse defines model for V1.Transfer.StartTransferResponse.
type V1TransferStartTransferResponse struct {
	Error   *bool  `json:"error,omitempty"`
	Message string `json:"message"`
	Path    string `json:"path"`
}

// V1TransferUnapproved defines model for V1.Transfer.Unapproved.
type V1TransferUnapproved struct {
	Directory string       `json:"directory"`
	Type      TransferType `json:"type"`
	UUID      UUID         `json:"uuid"`
}

// V2BetaJobsJob defines model for V2Beta.Jobs.Job.
type V2BetaJobsJob struct {
	LinkUUID     UUID                `json:"link_uuid"`
	Microservice string              `json:"microservice"`
	Name         string              `json:"name"`
	Status       V2BetaJobsJobStatus `json:"status"`
	Tasks        []V2BetaJobsTask    `json:"tasks"`
	UUID         UUID                `json:"uuid"`
}

// V2BetaJobsJobStatus defines model for V2Beta.Jobs.JobStatus.
type V2BetaJobsJobStatus string

// V2BetaJobsTask defines model for V2Beta.Jobs.Task.
type V2BetaJobsTask struct {
	// ExitCode POSIX-compatible exit code: 0 for success and any number from 1 to 255 for anything else.
	ExitCode ExitCode `json:"exit_code"`
	UUID     UUID     `json:"uuid"`
}

// V2BetaPackagesCreatePackageRequest defines model for V2Beta.Packages.CreatePackageRequest.
type V2BetaPackagesCreatePackageRequest struct {
	AccessSystemID   *string       `json:"access_system_id,omitempty"`
	Accession        *string       `json:"accession,omitempty"`
	AutoApprove      *bool         `json:"auto_approve,omitempty"`
	Name             string        `json:"name"`
	Path             string        `json:"path"`
	ProcessingConfig *string       `json:"processing_config,omitempty"`
	Type             *TransferType `json:"type,omitempty"`
}

// V2BetaPackagesCreatePackageResponse defines model for V2Beta.Packages.CreatePackageResponse.
type V2BetaPackagesCreatePackageResponse struct {
	ID UUID `json:"id"`
}

// V2BetaTasksTask defines model for V2Beta.Tasks.Task.
type V2BetaTasksTask struct {
	// Duration Task duration in seconds (integer). If the duration is less than a second, this will be a "< 1" string.
	Duration V2BetaTasksTask_Duration `json:"duration"`

	// ExitCode POSIX-compatible exit code: 0 for success and any number from 1 to 255 for anything else.
	ExitCode ExitCode `json:"exit_code"`
	FileName string   `json:"file_name"`
	FileUUID UUID     `json:"file_uuid"`

	// TimeCreated E.g.: "2020-01-17T00:44:37".
	TimeCreated Timestamp `json:"time_created"`

	// TimeEnded E.g.: "2020-01-17T00:44:37".
	TimeEnded *Timestamp `json:"time_ended,omitempty"`

	// TimeStarted E.g.: "2020-01-17T00:44:37".
	TimeStarted *Timestamp `json:"time_started,omitempty"`
	UUID        UUID       `json:"uuid"`
}

// V2BetaTasksTaskDuration1 defines model for .
type V2BetaTasksTaskDuration1 = int64

// V2BetaTasksTask_Duration Task duration in seconds (integer). If the duration is less than a second, this will be a "< 1" string.
type V2BetaTasksTask_Duration struct {
	union json.RawMessage
}

// V2BetaValidateInvalidDocumentResponse defines model for V2Beta.Validate.InvalidDocumentResponse.
type V2BetaValidateInvalidDocumentResponse struct {
	Reason string `json:"reason"`
	Valid  bool   `json:"valid"`
}

// V2BetaValidateValidDocumentResponse defines model for V2Beta.Validate.ValidDocumentResponse.
type V2BetaValidateValidDocumentResponse struct {
	Valid bool `json:"valid"`
}

// V2BetaValidateValidator defines model for V2Beta.Validate.Validator.
type V2BetaValidateValidator string

// ExitCode POSIX-compatible exit code: 0 for success and any number from 1 to 255 for anything else.
type ExitCode = uint8

// Timestamp E.g.: "2020-01-17T00:44:37".
type Timestamp = string

// UUID defines model for uuid.
type UUID = uuid.UUID

// FilesystemReadMetadataParams defines parameters for FilesystemReadMetadata.
type FilesystemReadMetadataParams struct {
	Path string `form:"path" json:"path"`
}

// FilesystemUpdateMetadataFormdataBody defines parameters for FilesystemUpdateMetadata.
type FilesystemUpdateMetadataFormdataBody struct {
	LevelOfDescription string `form:"level_of_description" json:"level_of_description"`
	Path               string `form:"path" json:"path"`
}

// IngestCopyMetadataFilesFormdataBody defines parameters for IngestCopyMetadataFiles.
type IngestCopyMetadataFilesFormdataBody struct {
	Paths   []string `form:"paths" json:"paths"`
	SIPUUID UUID     `form:"sip_uuid" json:"sip_uuid"`
}

// IngestReingestFormdataBody defines parameters for IngestReingest.
type IngestReingestFormdataBody struct {
	Name string `form:"name" json:"name"`
	UUID UUID   `form:"uuid" json:"uuid"`
}

// IngestApproveReingestFormdataBody defines parameters for IngestApproveReingest.
type IngestApproveReingestFormdataBody struct {
	UUID UUID `form:"uuid" json:"uuid"`
}

// ProcessingConfigurationReadParams defines parameters for ProcessingConfigurationRead.
type ProcessingConfigurationReadParams struct {
	Accept ProcessingConfigurationReadParamsAccept `json:"accept"`
}

// ProcessingConfigurationReadParamsAccept defines parameters for ProcessingConfigurationRead.
type ProcessingConfigurationReadParamsAccept string

// TransferApproveFormdataBody defines parameters for TransferApprove.
type TransferApproveFormdataBody struct {
	// Directory Directory the transfer is in currently.
	Directory string `form:"directory" json:"directory"`

	// Type Type of the transfer.
	Type TransferType `form:"type" json:"type"`
}

// TransferReingestFormdataBody defines parameters for TransferReingest.
type TransferReingestFormdataBody struct {
	Name string `form:"name" json:"name"`
	UUID UUID   `form:"uuid" json:"uuid"`
}

// TransferStartFormdataBody defines parameters for TransferStart.
type TransferStartFormdataBody struct {
	// AccessID Access system ID.
	AccessID string `form:"access_id" json:"access_id"`

	// Accession Accession number.
	Accession string `form:"accession" json:"accession"`

	// Name Name of the transfer.
	Name string `form:"name" json:"name"`

	// Paths List of base64-encoded <location_uuid>:<relative_path> to be copied into the new transfer. Location UUIDs should be associated with this pipeline, and relative path should be relative to the location.
	Paths []string `form:"paths" json:"paths"`

	// RowIds ID of the associated TransferMetadataSet for disk image ingest.
	RowIds []string `form:"row_ids" json:"row_ids"`

	// Type Type of the transfer.
	Type TransferType `form:"type" json:"type"`
}

// JobsListParams defines parameters for JobsList.
type JobsListParams struct {
	// Microservice Name of the microservice the jobs belong to.
	Microservice *string `form:"microservice,omitempty" json:"microservice,omitempty"`

	// LinkUUID UUID of the job chain link.
	LinkUUID UUID `form:"link_uuid" json:"link_uuid"`

	// Name Name of the job.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Detailed Include the task properties provided by the task endpoint.
	Detailed *bool `form:"detailed,omitempty" json:"detailed,omitempty"`
}

// FilesystemUpdateMetadataFormdataRequestBody defines body for FilesystemUpdateMetadata for application/x-www-form-urlencoded ContentType.
type FilesystemUpdateMetadataFormdataRequestBody FilesystemUpdateMetadataFormdataBody

// IngestCopyMetadataFilesFormdataRequestBody defines body for IngestCopyMetadataFiles for application/x-www-form-urlencoded ContentType.
type IngestCopyMetadataFilesFormdataRequestBody IngestCopyMetadataFilesFormdataBody

// IngestReingestFormdataRequestBody defines body for IngestReingest for application/x-www-form-urlencoded ContentType.
type IngestReingestFormdataRequestBody IngestReingestFormdataBody

// IngestApproveReingestFormdataRequestBody defines body for IngestApproveReingest for application/x-www-form-urlencoded ContentType.
type IngestApproveReingestFormdataRequestBody IngestApproveReingestFormdataBody

// TransferApproveFormdataRequestBody defines body for TransferApprove for application/x-www-form-urlencoded ContentType.
type TransferApproveFormdataRequestBody TransferApproveFormdataBody

// TransferReingestFormdataRequestBody defines body for TransferReingest for application/x-www-form-urlencoded ContentType.
type TransferReingestFormdataRequestBody TransferReingestFormdataBody

// TransferStartFormdataRequestBody defines body for TransferStart for application/x-www-form-urlencoded ContentType.
type TransferStartFormdataRequestBody TransferStartFormdataBody

// PackagesCreateJSONRequestBody defines body for PackagesCreate for application/json ContentType.
type PackagesCreateJSONRequestBody = V2BetaPackagesCreatePackageRequest

// AsUUID returns the union data inside the V1IngestReadResponse_SIPUUID as a UUID
func (t V1IngestReadResponse_SIPUUID) AsUUID() (UUID, error) {
	var body UUID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUUID overwrites any union data inside the V1IngestReadResponse_SIPUUID as the provided UUID
func (t *V1IngestReadResponse_SIPUUID) FromUUID(v UUID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUUID performs a merge with any union data inside the V1IngestReadResponse_SIPUUID, using the provided UUID
func (t *V1IngestReadResponse_SIPUUID) MergeUUID(v UUID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsV1IngestReadResponseSIPUUID1 returns the union data inside the V1IngestReadResponse_SIPUUID as a V1IngestReadResponseSIPUUID1
func (t V1IngestReadResponse_SIPUUID) AsV1IngestReadResponseSIPUUID1() (V1IngestReadResponseSIPUUID1, error) {
	var body V1IngestReadResponseSIPUUID1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromV1IngestReadResponseSIPUUID1 overwrites any union data inside the V1IngestReadResponse_SIPUUID as the provided V1IngestReadResponseSIPUUID1
func (t *V1IngestReadResponse_SIPUUID) FromV1IngestReadResponseSIPUUID1(v V1IngestReadResponseSIPUUID1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeV1IngestReadResponseSIPUUID1 performs a merge with any union data inside the V1IngestReadResponse_SIPUUID, using the provided V1IngestReadResponseSIPUUID1
func (t *V1IngestReadResponse_SIPUUID) MergeV1IngestReadResponseSIPUUID1(v V1IngestReadResponseSIPUUID1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t V1IngestReadResponse_SIPUUID) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *V1IngestReadResponse_SIPUUID) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUUID returns the union data inside the V1TransferReadResponse_SIPUUID as a UUID
func (t V1TransferReadResponse_SIPUUID) AsUUID() (UUID, error) {
	var body UUID
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUUID overwrites any union data inside the V1TransferReadResponse_SIPUUID as the provided UUID
func (t *V1TransferReadResponse_SIPUUID) FromUUID(v UUID) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUUID performs a merge with any union data inside the V1TransferReadResponse_SIPUUID, using the provided UUID
func (t *V1TransferReadResponse_SIPUUID) MergeUUID(v UUID) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsV1TransferReadResponseSIPUUID1 returns the union data inside the V1TransferReadResponse_SIPUUID as a V1TransferReadResponseSIPUUID1
func (t V1TransferReadResponse_SIPUUID) AsV1TransferReadResponseSIPUUID1() (V1TransferReadResponseSIPUUID1, error) {
	var body V1TransferReadResponseSIPUUID1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromV1TransferReadResponseSIPUUID1 overwrites any union data inside the V1TransferReadResponse_SIPUUID as the provided V1TransferReadResponseSIPUUID1
func (t *V1TransferReadResponse_SIPUUID) FromV1TransferReadResponseSIPUUID1(v V1TransferReadResponseSIPUUID1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeV1TransferReadResponseSIPUUID1 performs a merge with any union data inside the V1TransferReadResponse_SIPUUID, using the provided V1TransferReadResponseSIPUUID1
func (t *V1TransferReadResponse_SIPUUID) MergeV1TransferReadResponseSIPUUID1(v V1TransferReadResponseSIPUUID1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t V1TransferReadResponse_SIPUUID) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *V1TransferReadResponse_SIPUUID) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDurationString returns the union data inside the V2BetaTasksTask_Duration as a DurationString
func (t V2BetaTasksTask_Duration) AsDurationString() (DurationString, error) {
	var body DurationString
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDurationString overwrites any union data inside the V2BetaTasksTask_Duration as the provided DurationString
func (t *V2BetaTasksTask_Duration) FromDurationString(v DurationString) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDurationString performs a merge with any union data inside the V2BetaTasksTask_Duration, using the provided DurationString
func (t *V2BetaTasksTask_Duration) MergeDurationString(v DurationString) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsV2BetaTasksTaskDuration1 returns the union data inside the V2BetaTasksTask_Duration as a V2BetaTasksTaskDuration1
func (t V2BetaTasksTask_Duration) AsV2BetaTasksTaskDuration1() (V2BetaTasksTaskDuration1, error) {
	var body V2BetaTasksTaskDuration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromV2BetaTasksTaskDuration1 overwrites any union data inside the V2BetaTasksTask_Duration as the provided V2BetaTasksTaskDuration1
func (t *V2BetaTasksTask_Duration) FromV2BetaTasksTaskDuration1(v V2BetaTasksTaskDuration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeV2BetaTasksTaskDuration1 performs a merge with any union data inside the V2BetaTasksTask_Duration, using the provided V2BetaTasksTaskDuration1
func (t *V2BetaTasksTask_Duration) MergeV2BetaTasksTaskDuration1(v V2BetaTasksTaskDuration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t V2BetaTasksTask_Duration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *V2BetaTasksTask_Duration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/administration/dips/atom/fetch_levels)
	AdministrationFetchLevelsOfDescription(w http.ResponseWriter, r *http.Request)

	// (GET /api/filesystem/administration/dips/atom/levels)
	FilesystemListLevelsOfDescription(w http.ResponseWriter, r *http.Request)

	// (GET /api/filesystem/metadata)
	FilesystemReadMetadata(w http.ResponseWriter, r *http.Request, params FilesystemReadMetadataParams)

	// (POST /api/filesystem/metadata)
	FilesystemUpdateMetadata(w http.ResponseWriter, r *http.Request)

	// (GET /api/ingest/completed)
	IngestListCompleted(w http.ResponseWriter, r *http.Request)

	// (POST /api/ingest/copy_metadata_files)
	IngestCopyMetadataFiles(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/ingest/delete)
	IngestDeleteAll(w http.ResponseWriter, r *http.Request)

	// (POST /api/ingest/reingest)
	IngestReingest(w http.ResponseWriter, r *http.Request)

	// (POST /api/ingest/reingest/approve)
	IngestApproveReingest(w http.ResponseWriter, r *http.Request)

	// (GET /api/ingest/status/{id})
	IngestRead(w http.ResponseWriter, r *http.Request, id UUID)

	// (GET /api/ingest/waiting)
	IngestListWaiting(w http.ResponseWriter, r *http.Request)

	// (POST /api/ingest/{id}/delete)
	IngestDelete(w http.ResponseWriter, r *http.Request, id UUID)

	// (GET /api/processing-configuration)
	ProcessingConfigurationList(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/processing-configuration/{name})
	ProcessingConfigurationDelete(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/processing-configuration/{name})
	ProcessingConfigurationRead(w http.ResponseWriter, r *http.Request, name string, params ProcessingConfigurationReadParams)

	// (POST /api/transfer/approve)
	TransferApprove(w http.ResponseWriter, r *http.Request)

	// (GET /api/transfer/completed)
	TransferListCompleted(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/transfer/delete)
	TransferDeleteAll(w http.ResponseWriter, r *http.Request)

	// (POST /api/transfer/reingest)
	TransferReingest(w http.ResponseWriter, r *http.Request)

	// (POST /api/transfer/start_transfer)
	TransferStart(w http.ResponseWriter, r *http.Request)

	// (GET /api/transfer/status/{id})
	TransferRead(w http.ResponseWriter, r *http.Request, id UUID)

	// (GET /api/transfer/unapproved)
	TransferListUnapproved(w http.ResponseWriter, r *http.Request)

	// (POST /api/transfer/{id}/delete)
	TransferDelete(w http.ResponseWriter, r *http.Request, id UUID)

	// (GET /api/v2beta/jobs/{id})
	JobsList(w http.ResponseWriter, r *http.Request, id UUID, params JobsListParams)

	// (POST /api/v2beta/package)
	PackagesCreate(w http.ResponseWriter, r *http.Request)

	// (GET /api/v2beta/task/{id})
	TasksRead(w http.ResponseWriter, r *http.Request, id UUID)

	// (POST /api/v2beta/validate/{validator})
	ValidateCreate(w http.ResponseWriter, r *http.Request, validator V2BetaValidateValidator)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AdministrationFetchLevelsOfDescription operation middleware
func (siw *ServerInterfaceWrapper) AdministrationFetchLevelsOfDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdministrationFetchLevelsOfDescription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FilesystemListLevelsOfDescription operation middleware
func (siw *ServerInterfaceWrapper) FilesystemListLevelsOfDescription(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesystemListLevelsOfDescription(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FilesystemReadMetadata operation middleware
func (siw *ServerInterfaceWrapper) FilesystemReadMetadata(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FilesystemReadMetadataParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesystemReadMetadata(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FilesystemUpdateMetadata operation middleware
func (siw *ServerInterfaceWrapper) FilesystemUpdateMetadata(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FilesystemUpdateMetadata(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestListCompleted operation middleware
func (siw *ServerInterfaceWrapper) IngestListCompleted(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestListCompleted(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestCopyMetadataFiles operation middleware
func (siw *ServerInterfaceWrapper) IngestCopyMetadataFiles(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestCopyMetadataFiles(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestDeleteAll operation middleware
func (siw *ServerInterfaceWrapper) IngestDeleteAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestDeleteAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestReingest operation middleware
func (siw *ServerInterfaceWrapper) IngestReingest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestReingest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestApproveReingest operation middleware
func (siw *ServerInterfaceWrapper) IngestApproveReingest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestApproveReingest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestRead operation middleware
func (siw *ServerInterfaceWrapper) IngestRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestListWaiting operation middleware
func (siw *ServerInterfaceWrapper) IngestListWaiting(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestListWaiting(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// IngestDelete operation middleware
func (siw *ServerInterfaceWrapper) IngestDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.IngestDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessingConfigurationList operation middleware
func (siw *ServerInterfaceWrapper) ProcessingConfigurationList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessingConfigurationList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessingConfigurationDelete operation middleware
func (siw *ServerInterfaceWrapper) ProcessingConfigurationDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessingConfigurationDelete(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ProcessingConfigurationRead operation middleware
func (siw *ServerInterfaceWrapper) ProcessingConfigurationRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", r.PathValue("name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ProcessingConfigurationReadParams

	headers := r.Header

	// ------------- Required header parameter "accept" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("accept")]; found {
		var Accept ProcessingConfigurationReadParamsAccept
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "accept", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "accept", valueList[0], &Accept, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accept", Err: err})
			return
		}

		params.Accept = Accept

	} else {
		err := fmt.Errorf("Header parameter accept is required, but not found")
		siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{ParamName: "accept", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessingConfigurationRead(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferApprove operation middleware
func (siw *ServerInterfaceWrapper) TransferApprove(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferApprove(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferListCompleted operation middleware
func (siw *ServerInterfaceWrapper) TransferListCompleted(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferListCompleted(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferDeleteAll operation middleware
func (siw *ServerInterfaceWrapper) TransferDeleteAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferDeleteAll(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferReingest operation middleware
func (siw *ServerInterfaceWrapper) TransferReingest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferReingest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferStart operation middleware
func (siw *ServerInterfaceWrapper) TransferStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferStart(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferRead operation middleware
func (siw *ServerInterfaceWrapper) TransferRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferListUnapproved operation middleware
func (siw *ServerInterfaceWrapper) TransferListUnapproved(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferListUnapproved(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TransferDelete operation middleware
func (siw *ServerInterfaceWrapper) TransferDelete(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TransferDelete(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// JobsList operation middleware
func (siw *ServerInterfaceWrapper) JobsList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params JobsListParams

	// ------------- Optional query parameter "microservice" -------------

	err = runtime.BindQueryParameter("form", true, false, "microservice", r.URL.Query(), &params.Microservice)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "microservice", Err: err})
		return
	}

	// ------------- Required query parameter "link_uuid" -------------

	if paramValue := r.URL.Query().Get("link_uuid"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "link_uuid"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "link_uuid", r.URL.Query(), &params.LinkUUID)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "link_uuid", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "detailed" -------------

	err = runtime.BindQueryParameter("form", true, false, "detailed", r.URL.Query(), &params.Detailed)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "detailed", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.JobsList(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PackagesCreate operation middleware
func (siw *ServerInterfaceWrapper) PackagesCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PackagesCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TasksRead operation middleware
func (siw *ServerInterfaceWrapper) TasksRead(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TasksRead(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ValidateCreate operation middleware
func (siw *ServerInterfaceWrapper) ValidateCreate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "validator" -------------
	var validator V2BetaValidateValidator

	err = runtime.BindStyledParameterWithOptions("simple", "validator", r.PathValue("validator"), &validator, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "validator", Err: err})
		return
	}

	ctx = context.WithValue(ctx, ApiKeyAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ValidateCreate(w, r, validator)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/api/administration/dips/atom/fetch_levels", wrapper.AdministrationFetchLevelsOfDescription)
	m.HandleFunc("GET "+options.BaseURL+"/api/filesystem/administration/dips/atom/levels", wrapper.FilesystemListLevelsOfDescription)
	m.HandleFunc("GET "+options.BaseURL+"/api/filesystem/metadata", wrapper.FilesystemReadMetadata)
	m.HandleFunc("POST "+options.BaseURL+"/api/filesystem/metadata", wrapper.FilesystemUpdateMetadata)
	m.HandleFunc("GET "+options.BaseURL+"/api/ingest/completed", wrapper.IngestListCompleted)
	m.HandleFunc("POST "+options.BaseURL+"/api/ingest/copy_metadata_files", wrapper.IngestCopyMetadataFiles)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/ingest/delete", wrapper.IngestDeleteAll)
	m.HandleFunc("POST "+options.BaseURL+"/api/ingest/reingest", wrapper.IngestReingest)
	m.HandleFunc("POST "+options.BaseURL+"/api/ingest/reingest/approve", wrapper.IngestApproveReingest)
	m.HandleFunc("GET "+options.BaseURL+"/api/ingest/status/{id}", wrapper.IngestRead)
	m.HandleFunc("GET "+options.BaseURL+"/api/ingest/waiting", wrapper.IngestListWaiting)
	m.HandleFunc("POST "+options.BaseURL+"/api/ingest/{id}/delete", wrapper.IngestDelete)
	m.HandleFunc("GET "+options.BaseURL+"/api/processing-configuration", wrapper.ProcessingConfigurationList)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/processing-configuration/{name}", wrapper.ProcessingConfigurationDelete)
	m.HandleFunc("GET "+options.BaseURL+"/api/processing-configuration/{name}", wrapper.ProcessingConfigurationRead)
	m.HandleFunc("POST "+options.BaseURL+"/api/transfer/approve", wrapper.TransferApprove)
	m.HandleFunc("GET "+options.BaseURL+"/api/transfer/completed", wrapper.TransferListCompleted)
	m.HandleFunc("DELETE "+options.BaseURL+"/api/transfer/delete", wrapper.TransferDeleteAll)
	m.HandleFunc("POST "+options.BaseURL+"/api/transfer/reingest", wrapper.TransferReingest)
	m.HandleFunc("POST "+options.BaseURL+"/api/transfer/start_transfer", wrapper.TransferStart)
	m.HandleFunc("GET "+options.BaseURL+"/api/transfer/status/{id}", wrapper.TransferRead)
	m.HandleFunc("GET "+options.BaseURL+"/api/transfer/unapproved", wrapper.TransferListUnapproved)
	m.HandleFunc("POST "+options.BaseURL+"/api/transfer/{id}/delete", wrapper.TransferDelete)
	m.HandleFunc("GET "+options.BaseURL+"/api/v2beta/jobs/{id}", wrapper.JobsList)
	m.HandleFunc("POST "+options.BaseURL+"/api/v2beta/package", wrapper.PackagesCreate)
	m.HandleFunc("GET "+options.BaseURL+"/api/v2beta/task/{id}", wrapper.TasksRead)
	m.HandleFunc("POST "+options.BaseURL+"/api/v2beta/validate/{validator}", wrapper.ValidateCreate)

	return m
}

type AdministrationFetchLevelsOfDescriptionRequestObject struct {
}

type AdministrationFetchLevelsOfDescriptionResponseObject interface {
	VisitAdministrationFetchLevelsOfDescriptionResponse(w http.ResponseWriter) error
}

type AdministrationFetchLevelsOfDescription200JSONResponse []map[string]UUID

func (response AdministrationFetchLevelsOfDescription200JSONResponse) VisitAdministrationFetchLevelsOfDescriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdministrationFetchLevelsOfDescription500JSONResponse struct {
	Error   string `json:"error"`
	Success bool   `json:"success"`
}

func (response AdministrationFetchLevelsOfDescription500JSONResponse) VisitAdministrationFetchLevelsOfDescriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type FilesystemListLevelsOfDescriptionRequestObject struct {
}

type FilesystemListLevelsOfDescriptionResponseObject interface {
	VisitFilesystemListLevelsOfDescriptionResponse(w http.ResponseWriter) error
}

type FilesystemListLevelsOfDescription200JSONResponse []map[string]UUID

func (response FilesystemListLevelsOfDescription200JSONResponse) VisitFilesystemListLevelsOfDescriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FilesystemReadMetadataRequestObject struct {
	Params FilesystemReadMetadataParams
}

type FilesystemReadMetadataResponseObject interface {
	VisitFilesystemReadMetadataResponse(w http.ResponseWriter) error
}

type FilesystemReadMetadata200JSONResponse struct {
	LevelOfDescription string `json:"level_of_description"`
}

func (response FilesystemReadMetadata200JSONResponse) VisitFilesystemReadMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FilesystemReadMetadata404Response struct {
}

func (response FilesystemReadMetadata404Response) VisitFilesystemReadMetadataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FilesystemUpdateMetadataRequestObject struct {
	Body *FilesystemUpdateMetadataFormdataRequestBody
}

type FilesystemUpdateMetadataResponseObject interface {
	VisitFilesystemUpdateMetadataResponse(w http.ResponseWriter) error
}

type FilesystemUpdateMetadata201JSONResponse Success

func (response FilesystemUpdateMetadata201JSONResponse) VisitFilesystemUpdateMetadataResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type FilesystemUpdateMetadata404Response struct {
}

func (response FilesystemUpdateMetadata404Response) VisitFilesystemUpdateMetadataResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type IngestListCompletedRequestObject struct {
}

type IngestListCompletedResponseObject interface {
	VisitIngestListCompletedResponse(w http.ResponseWriter) error
}

type IngestListCompleted200JSONResponse struct {
	Message string `json:"message"`
	Results []UUID `json:"results"`
}

func (response IngestListCompleted200JSONResponse) VisitIngestListCompletedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestCopyMetadataFilesRequestObject struct {
	Body *IngestCopyMetadataFilesFormdataRequestBody
}

type IngestCopyMetadataFilesResponseObject interface {
	VisitIngestCopyMetadataFilesResponse(w http.ResponseWriter) error
}

type IngestCopyMetadataFiles200JSONResponse struct {
	Error   *bool  `json:"error,omitempty"`
	Message string `json:"message"`
}

func (response IngestCopyMetadataFiles200JSONResponse) VisitIngestCopyMetadataFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestCopyMetadataFiles400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestCopyMetadataFiles400JSONResponse) VisitIngestCopyMetadataFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IngestCopyMetadataFiles500JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestCopyMetadataFiles500JSONResponse) VisitIngestCopyMetadataFilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IngestDeleteAllRequestObject struct {
}

type IngestDeleteAllResponseObject interface {
	VisitIngestDeleteAllResponse(w http.ResponseWriter) error
}

type IngestDeleteAll200JSONResponse Removed

func (response IngestDeleteAll200JSONResponse) VisitIngestDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestDeleteAll400Response struct {
}

func (response IngestDeleteAll400Response) VisitIngestDeleteAllResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type IngestDeleteAll409JSONResponse NotRemoved

func (response IngestDeleteAll409JSONResponse) VisitIngestDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type IngestDeleteAll500JSONResponse NotRemoved

func (response IngestDeleteAll500JSONResponse) VisitIngestDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IngestReingestRequestObject struct {
	Body *IngestReingestFormdataRequestBody
}

type IngestReingestResponseObject interface {
	VisitIngestReingestResponse(w http.ResponseWriter) error
}

type IngestReingest200JSONResponse V1IngestReingestResponse

func (response IngestReingest200JSONResponse) VisitIngestReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestReingest400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestReingest400JSONResponse) VisitIngestReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IngestReingest500JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestReingest500JSONResponse) VisitIngestReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type IngestApproveReingestRequestObject struct {
	Body *IngestApproveReingestFormdataRequestBody
}

type IngestApproveReingestResponseObject interface {
	VisitIngestApproveReingestResponse(w http.ResponseWriter) error
}

type IngestApproveReingest200JSONResponse struct {
	Error   *bool  `json:"error,omitempty"`
	Message string `json:"message"`
}

func (response IngestApproveReingest200JSONResponse) VisitIngestApproveReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestApproveReingest400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestApproveReingest400JSONResponse) VisitIngestApproveReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IngestReadRequestObject struct {
	ID UUID `json:"id"`
}

type IngestReadResponseObject interface {
	VisitIngestReadResponse(w http.ResponseWriter) error
}

type IngestRead200JSONResponse V1IngestReadResponse

func (response IngestRead200JSONResponse) VisitIngestReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestRead400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response IngestRead400JSONResponse) VisitIngestReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type IngestListWaitingRequestObject struct {
}

type IngestListWaitingResponseObject interface {
	VisitIngestListWaitingResponse(w http.ResponseWriter) error
}

type IngestListWaiting200JSONResponse struct {
	Message string            `json:"message"`
	Results []V1IngestWaiting `json:"results"`
}

func (response IngestListWaiting200JSONResponse) VisitIngestListWaitingResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestDeleteRequestObject struct {
	ID UUID `json:"id"`
}

type IngestDeleteResponseObject interface {
	VisitIngestDeleteResponse(w http.ResponseWriter) error
}

type IngestDelete200JSONResponse Removed

func (response IngestDelete200JSONResponse) VisitIngestDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type IngestDelete400Response struct {
}

func (response IngestDelete400Response) VisitIngestDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type IngestDelete409JSONResponse NotRemoved

func (response IngestDelete409JSONResponse) VisitIngestDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type IngestDelete500JSONResponse NotRemoved

func (response IngestDelete500JSONResponse) VisitIngestDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ProcessingConfigurationListRequestObject struct {
}

type ProcessingConfigurationListResponseObject interface {
	VisitProcessingConfigurationListResponse(w http.ResponseWriter) error
}

type ProcessingConfigurationList200JSONResponse []string

func (response ProcessingConfigurationList200JSONResponse) VisitProcessingConfigurationListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessingConfigurationDeleteRequestObject struct {
	Name string `json:"name"`
}

type ProcessingConfigurationDeleteResponseObject interface {
	VisitProcessingConfigurationDeleteResponse(w http.ResponseWriter) error
}

type ProcessingConfigurationDelete200JSONResponse Success

func (response ProcessingConfigurationDelete200JSONResponse) VisitProcessingConfigurationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ProcessingConfigurationDelete404JSONResponse struct {
	Error   string `json:"error"`
	Success bool   `json:"success"`
}

func (response ProcessingConfigurationDelete404JSONResponse) VisitProcessingConfigurationDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessingConfigurationReadRequestObject struct {
	Name   string `json:"name"`
	Params ProcessingConfigurationReadParams
}

type ProcessingConfigurationReadResponseObject interface {
	VisitProcessingConfigurationReadResponse(w http.ResponseWriter) error
}

type ProcessingConfigurationRead200TextXMLResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response ProcessingConfigurationRead200TextXMLResponse) VisitProcessingConfigurationReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/xml")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type ProcessingConfigurationRead404JSONResponse struct {
	Error   string `json:"error"`
	Success bool   `json:"success"`
}

func (response ProcessingConfigurationRead404JSONResponse) VisitProcessingConfigurationReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ProcessingConfigurationRead415Response struct {
}

func (response ProcessingConfigurationRead415Response) VisitProcessingConfigurationReadResponse(w http.ResponseWriter) error {
	w.WriteHeader(415)
	return nil
}

type ProcessingConfigurationRead500JSONResponse struct {
	Error   string `json:"error"`
	Success bool   `json:"success"`
}

func (response ProcessingConfigurationRead500JSONResponse) VisitProcessingConfigurationReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransferApproveRequestObject struct {
	Body *TransferApproveFormdataRequestBody
}

type TransferApproveResponseObject interface {
	VisitTransferApproveResponse(w http.ResponseWriter) error
}

type TransferApprove200JSONResponse V1TransferApproveTransferResponse

func (response TransferApprove200JSONResponse) VisitTransferApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferApprove500JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TransferApprove500JSONResponse) VisitTransferApproveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransferListCompletedRequestObject struct {
}

type TransferListCompletedResponseObject interface {
	VisitTransferListCompletedResponse(w http.ResponseWriter) error
}

type TransferListCompleted200JSONResponse struct {
	Message string `json:"message"`
	Results []UUID `json:"results"`
}

func (response TransferListCompleted200JSONResponse) VisitTransferListCompletedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferDeleteAllRequestObject struct {
}

type TransferDeleteAllResponseObject interface {
	VisitTransferDeleteAllResponse(w http.ResponseWriter) error
}

type TransferDeleteAll200JSONResponse Removed

func (response TransferDeleteAll200JSONResponse) VisitTransferDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferDeleteAll400Response struct {
}

func (response TransferDeleteAll400Response) VisitTransferDeleteAllResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type TransferDeleteAll409JSONResponse NotRemoved

func (response TransferDeleteAll409JSONResponse) VisitTransferDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type TransferDeleteAll500JSONResponse NotRemoved

func (response TransferDeleteAll500JSONResponse) VisitTransferDeleteAllResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransferReingestRequestObject struct {
	Body *TransferReingestFormdataRequestBody
}

type TransferReingestResponseObject interface {
	VisitTransferReingestResponse(w http.ResponseWriter) error
}

type TransferReingest200JSONResponse V1TransferReingestResponse

func (response TransferReingest200JSONResponse) VisitTransferReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferReingest400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TransferReingest400JSONResponse) VisitTransferReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TransferReingest500JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TransferReingest500JSONResponse) VisitTransferReingestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransferStartRequestObject struct {
	Body *TransferStartFormdataRequestBody
}

type TransferStartResponseObject interface {
	VisitTransferStartResponse(w http.ResponseWriter) error
}

type TransferStart200JSONResponse V1TransferStartTransferResponse

func (response TransferStart200JSONResponse) VisitTransferStartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferStart500JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TransferStart500JSONResponse) VisitTransferStartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type TransferReadRequestObject struct {
	ID UUID `json:"id"`
}

type TransferReadResponseObject interface {
	VisitTransferReadResponse(w http.ResponseWriter) error
}

type TransferRead200JSONResponse V1TransferReadResponse

func (response TransferRead200JSONResponse) VisitTransferReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferRead400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TransferRead400JSONResponse) VisitTransferReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TransferListUnapprovedRequestObject struct {
}

type TransferListUnapprovedResponseObject interface {
	VisitTransferListUnapprovedResponse(w http.ResponseWriter) error
}

type TransferListUnapproved200JSONResponse struct {
	Message string                 `json:"message"`
	Results []V1TransferUnapproved `json:"results"`
}

func (response TransferListUnapproved200JSONResponse) VisitTransferListUnapprovedResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferDeleteRequestObject struct {
	ID UUID `json:"id"`
}

type TransferDeleteResponseObject interface {
	VisitTransferDeleteResponse(w http.ResponseWriter) error
}

type TransferDelete200JSONResponse Removed

func (response TransferDelete200JSONResponse) VisitTransferDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TransferDelete400Response struct {
}

func (response TransferDelete400Response) VisitTransferDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type TransferDelete409JSONResponse NotRemoved

func (response TransferDelete409JSONResponse) VisitTransferDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type TransferDelete500JSONResponse NotRemoved

func (response TransferDelete500JSONResponse) VisitTransferDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type JobsListRequestObject struct {
	ID     UUID `json:"id"`
	Params JobsListParams
}

type JobsListResponseObject interface {
	VisitJobsListResponse(w http.ResponseWriter) error
}

type JobsList200JSONResponse []V2BetaJobsJob

func (response JobsList200JSONResponse) VisitJobsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type JobsList400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response JobsList400JSONResponse) VisitJobsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PackagesCreateRequestObject struct {
	Body *PackagesCreateJSONRequestBody
}

type PackagesCreateResponseObject interface {
	VisitPackagesCreateResponse(w http.ResponseWriter) error
}

type PackagesCreate201JSONResponse V2BetaPackagesCreatePackageResponse

func (response PackagesCreate201JSONResponse) VisitPackagesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PackagesCreate400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response PackagesCreate400JSONResponse) VisitPackagesCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type TasksReadRequestObject struct {
	ID UUID `json:"id"`
}

type TasksReadResponseObject interface {
	VisitTasksReadResponse(w http.ResponseWriter) error
}

type TasksRead200JSONResponse V2BetaTasksTask

func (response TasksRead200JSONResponse) VisitTasksReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TasksRead400JSONResponse struct {
	Error   bool   `json:"error"`
	Message string `json:"message"`
}

func (response TasksRead400JSONResponse) VisitTasksReadResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidateCreateRequestObject struct {
	Validator V2BetaValidateValidator `json:"validator"`
	Body      io.Reader
}

type ValidateCreateResponseObject interface {
	VisitValidateCreateResponse(w http.ResponseWriter) error
}

type ValidateCreate200JSONResponse V2BetaValidateValidDocumentResponse

func (response ValidateCreate200JSONResponse) VisitValidateCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidateCreate400JSONResponse struct {
	union json.RawMessage
}

func (response ValidateCreate400JSONResponse) VisitValidateCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.union)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/administration/dips/atom/fetch_levels)
	AdministrationFetchLevelsOfDescription(ctx context.Context, request AdministrationFetchLevelsOfDescriptionRequestObject) (AdministrationFetchLevelsOfDescriptionResponseObject, error)

	// (GET /api/filesystem/administration/dips/atom/levels)
	FilesystemListLevelsOfDescription(ctx context.Context, request FilesystemListLevelsOfDescriptionRequestObject) (FilesystemListLevelsOfDescriptionResponseObject, error)

	// (GET /api/filesystem/metadata)
	FilesystemReadMetadata(ctx context.Context, request FilesystemReadMetadataRequestObject) (FilesystemReadMetadataResponseObject, error)

	// (POST /api/filesystem/metadata)
	FilesystemUpdateMetadata(ctx context.Context, request FilesystemUpdateMetadataRequestObject) (FilesystemUpdateMetadataResponseObject, error)

	// (GET /api/ingest/completed)
	IngestListCompleted(ctx context.Context, request IngestListCompletedRequestObject) (IngestListCompletedResponseObject, error)

	// (POST /api/ingest/copy_metadata_files)
	IngestCopyMetadataFiles(ctx context.Context, request IngestCopyMetadataFilesRequestObject) (IngestCopyMetadataFilesResponseObject, error)

	// (DELETE /api/ingest/delete)
	IngestDeleteAll(ctx context.Context, request IngestDeleteAllRequestObject) (IngestDeleteAllResponseObject, error)

	// (POST /api/ingest/reingest)
	IngestReingest(ctx context.Context, request IngestReingestRequestObject) (IngestReingestResponseObject, error)

	// (POST /api/ingest/reingest/approve)
	IngestApproveReingest(ctx context.Context, request IngestApproveReingestRequestObject) (IngestApproveReingestResponseObject, error)

	// (GET /api/ingest/status/{id})
	IngestRead(ctx context.Context, request IngestReadRequestObject) (IngestReadResponseObject, error)

	// (GET /api/ingest/waiting)
	IngestListWaiting(ctx context.Context, request IngestListWaitingRequestObject) (IngestListWaitingResponseObject, error)

	// (POST /api/ingest/{id}/delete)
	IngestDelete(ctx context.Context, request IngestDeleteRequestObject) (IngestDeleteResponseObject, error)

	// (GET /api/processing-configuration)
	ProcessingConfigurationList(ctx context.Context, request ProcessingConfigurationListRequestObject) (ProcessingConfigurationListResponseObject, error)

	// (DELETE /api/processing-configuration/{name})
	ProcessingConfigurationDelete(ctx context.Context, request ProcessingConfigurationDeleteRequestObject) (ProcessingConfigurationDeleteResponseObject, error)

	// (GET /api/processing-configuration/{name})
	ProcessingConfigurationRead(ctx context.Context, request ProcessingConfigurationReadRequestObject) (ProcessingConfigurationReadResponseObject, error)

	// (POST /api/transfer/approve)
	TransferApprove(ctx context.Context, request TransferApproveRequestObject) (TransferApproveResponseObject, error)

	// (GET /api/transfer/completed)
	TransferListCompleted(ctx context.Context, request TransferListCompletedRequestObject) (TransferListCompletedResponseObject, error)

	// (DELETE /api/transfer/delete)
	TransferDeleteAll(ctx context.Context, request TransferDeleteAllRequestObject) (TransferDeleteAllResponseObject, error)

	// (POST /api/transfer/reingest)
	TransferReingest(ctx context.Context, request TransferReingestRequestObject) (TransferReingestResponseObject, error)

	// (POST /api/transfer/start_transfer)
	TransferStart(ctx context.Context, request TransferStartRequestObject) (TransferStartResponseObject, error)

	// (GET /api/transfer/status/{id})
	TransferRead(ctx context.Context, request TransferReadRequestObject) (TransferReadResponseObject, error)

	// (GET /api/transfer/unapproved)
	TransferListUnapproved(ctx context.Context, request TransferListUnapprovedRequestObject) (TransferListUnapprovedResponseObject, error)

	// (POST /api/transfer/{id}/delete)
	TransferDelete(ctx context.Context, request TransferDeleteRequestObject) (TransferDeleteResponseObject, error)

	// (GET /api/v2beta/jobs/{id})
	JobsList(ctx context.Context, request JobsListRequestObject) (JobsListResponseObject, error)

	// (POST /api/v2beta/package)
	PackagesCreate(ctx context.Context, request PackagesCreateRequestObject) (PackagesCreateResponseObject, error)

	// (GET /api/v2beta/task/{id})
	TasksRead(ctx context.Context, request TasksReadRequestObject) (TasksReadResponseObject, error)

	// (POST /api/v2beta/validate/{validator})
	ValidateCreate(ctx context.Context, request ValidateCreateRequestObject) (ValidateCreateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// AdministrationFetchLevelsOfDescription operation middleware
func (sh *strictHandler) AdministrationFetchLevelsOfDescription(w http.ResponseWriter, r *http.Request) {
	var request AdministrationFetchLevelsOfDescriptionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.AdministrationFetchLevelsOfDescription(ctx, request.(AdministrationFetchLevelsOfDescriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdministrationFetchLevelsOfDescription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(AdministrationFetchLevelsOfDescriptionResponseObject); ok {
		if err := validResponse.VisitAdministrationFetchLevelsOfDescriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FilesystemListLevelsOfDescription operation middleware
func (sh *strictHandler) FilesystemListLevelsOfDescription(w http.ResponseWriter, r *http.Request) {
	var request FilesystemListLevelsOfDescriptionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesystemListLevelsOfDescription(ctx, request.(FilesystemListLevelsOfDescriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesystemListLevelsOfDescription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesystemListLevelsOfDescriptionResponseObject); ok {
		if err := validResponse.VisitFilesystemListLevelsOfDescriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FilesystemReadMetadata operation middleware
func (sh *strictHandler) FilesystemReadMetadata(w http.ResponseWriter, r *http.Request, params FilesystemReadMetadataParams) {
	var request FilesystemReadMetadataRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesystemReadMetadata(ctx, request.(FilesystemReadMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesystemReadMetadata")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesystemReadMetadataResponseObject); ok {
		if err := validResponse.VisitFilesystemReadMetadataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// FilesystemUpdateMetadata operation middleware
func (sh *strictHandler) FilesystemUpdateMetadata(w http.ResponseWriter, r *http.Request) {
	var request FilesystemUpdateMetadataRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body FilesystemUpdateMetadataFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.FilesystemUpdateMetadata(ctx, request.(FilesystemUpdateMetadataRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FilesystemUpdateMetadata")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(FilesystemUpdateMetadataResponseObject); ok {
		if err := validResponse.VisitFilesystemUpdateMetadataResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestListCompleted operation middleware
func (sh *strictHandler) IngestListCompleted(w http.ResponseWriter, r *http.Request) {
	var request IngestListCompletedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestListCompleted(ctx, request.(IngestListCompletedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestListCompleted")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestListCompletedResponseObject); ok {
		if err := validResponse.VisitIngestListCompletedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestCopyMetadataFiles operation middleware
func (sh *strictHandler) IngestCopyMetadataFiles(w http.ResponseWriter, r *http.Request) {
	var request IngestCopyMetadataFilesRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body IngestCopyMetadataFilesFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestCopyMetadataFiles(ctx, request.(IngestCopyMetadataFilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestCopyMetadataFiles")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestCopyMetadataFilesResponseObject); ok {
		if err := validResponse.VisitIngestCopyMetadataFilesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestDeleteAll operation middleware
func (sh *strictHandler) IngestDeleteAll(w http.ResponseWriter, r *http.Request) {
	var request IngestDeleteAllRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestDeleteAll(ctx, request.(IngestDeleteAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestDeleteAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestDeleteAllResponseObject); ok {
		if err := validResponse.VisitIngestDeleteAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestReingest operation middleware
func (sh *strictHandler) IngestReingest(w http.ResponseWriter, r *http.Request) {
	var request IngestReingestRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body IngestReingestFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestReingest(ctx, request.(IngestReingestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestReingest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestReingestResponseObject); ok {
		if err := validResponse.VisitIngestReingestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestApproveReingest operation middleware
func (sh *strictHandler) IngestApproveReingest(w http.ResponseWriter, r *http.Request) {
	var request IngestApproveReingestRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body IngestApproveReingestFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestApproveReingest(ctx, request.(IngestApproveReingestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestApproveReingest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestApproveReingestResponseObject); ok {
		if err := validResponse.VisitIngestApproveReingestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestRead operation middleware
func (sh *strictHandler) IngestRead(w http.ResponseWriter, r *http.Request, id UUID) {
	var request IngestReadRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestRead(ctx, request.(IngestReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestReadResponseObject); ok {
		if err := validResponse.VisitIngestReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestListWaiting operation middleware
func (sh *strictHandler) IngestListWaiting(w http.ResponseWriter, r *http.Request) {
	var request IngestListWaitingRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestListWaiting(ctx, request.(IngestListWaitingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestListWaiting")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestListWaitingResponseObject); ok {
		if err := validResponse.VisitIngestListWaitingResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// IngestDelete operation middleware
func (sh *strictHandler) IngestDelete(w http.ResponseWriter, r *http.Request, id UUID) {
	var request IngestDeleteRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.IngestDelete(ctx, request.(IngestDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "IngestDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(IngestDeleteResponseObject); ok {
		if err := validResponse.VisitIngestDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessingConfigurationList operation middleware
func (sh *strictHandler) ProcessingConfigurationList(w http.ResponseWriter, r *http.Request) {
	var request ProcessingConfigurationListRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessingConfigurationList(ctx, request.(ProcessingConfigurationListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessingConfigurationList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessingConfigurationListResponseObject); ok {
		if err := validResponse.VisitProcessingConfigurationListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessingConfigurationDelete operation middleware
func (sh *strictHandler) ProcessingConfigurationDelete(w http.ResponseWriter, r *http.Request, name string) {
	var request ProcessingConfigurationDeleteRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessingConfigurationDelete(ctx, request.(ProcessingConfigurationDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessingConfigurationDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessingConfigurationDeleteResponseObject); ok {
		if err := validResponse.VisitProcessingConfigurationDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ProcessingConfigurationRead operation middleware
func (sh *strictHandler) ProcessingConfigurationRead(w http.ResponseWriter, r *http.Request, name string, params ProcessingConfigurationReadParams) {
	var request ProcessingConfigurationReadRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ProcessingConfigurationRead(ctx, request.(ProcessingConfigurationReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ProcessingConfigurationRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ProcessingConfigurationReadResponseObject); ok {
		if err := validResponse.VisitProcessingConfigurationReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferApprove operation middleware
func (sh *strictHandler) TransferApprove(w http.ResponseWriter, r *http.Request) {
	var request TransferApproveRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body TransferApproveFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferApprove(ctx, request.(TransferApproveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferApprove")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferApproveResponseObject); ok {
		if err := validResponse.VisitTransferApproveResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferListCompleted operation middleware
func (sh *strictHandler) TransferListCompleted(w http.ResponseWriter, r *http.Request) {
	var request TransferListCompletedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferListCompleted(ctx, request.(TransferListCompletedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferListCompleted")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferListCompletedResponseObject); ok {
		if err := validResponse.VisitTransferListCompletedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferDeleteAll operation middleware
func (sh *strictHandler) TransferDeleteAll(w http.ResponseWriter, r *http.Request) {
	var request TransferDeleteAllRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferDeleteAll(ctx, request.(TransferDeleteAllRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferDeleteAll")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferDeleteAllResponseObject); ok {
		if err := validResponse.VisitTransferDeleteAllResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferReingest operation middleware
func (sh *strictHandler) TransferReingest(w http.ResponseWriter, r *http.Request) {
	var request TransferReingestRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body TransferReingestFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferReingest(ctx, request.(TransferReingestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferReingest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferReingestResponseObject); ok {
		if err := validResponse.VisitTransferReingestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferStart operation middleware
func (sh *strictHandler) TransferStart(w http.ResponseWriter, r *http.Request) {
	var request TransferStartRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body TransferStartFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferStart(ctx, request.(TransferStartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferStart")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferStartResponseObject); ok {
		if err := validResponse.VisitTransferStartResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferRead operation middleware
func (sh *strictHandler) TransferRead(w http.ResponseWriter, r *http.Request, id UUID) {
	var request TransferReadRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferRead(ctx, request.(TransferReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferReadResponseObject); ok {
		if err := validResponse.VisitTransferReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferListUnapproved operation middleware
func (sh *strictHandler) TransferListUnapproved(w http.ResponseWriter, r *http.Request) {
	var request TransferListUnapprovedRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferListUnapproved(ctx, request.(TransferListUnapprovedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferListUnapproved")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferListUnapprovedResponseObject); ok {
		if err := validResponse.VisitTransferListUnapprovedResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TransferDelete operation middleware
func (sh *strictHandler) TransferDelete(w http.ResponseWriter, r *http.Request, id UUID) {
	var request TransferDeleteRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TransferDelete(ctx, request.(TransferDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TransferDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TransferDeleteResponseObject); ok {
		if err := validResponse.VisitTransferDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// JobsList operation middleware
func (sh *strictHandler) JobsList(w http.ResponseWriter, r *http.Request, id UUID, params JobsListParams) {
	var request JobsListRequestObject

	request.ID = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.JobsList(ctx, request.(JobsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "JobsList")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(JobsListResponseObject); ok {
		if err := validResponse.VisitJobsListResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PackagesCreate operation middleware
func (sh *strictHandler) PackagesCreate(w http.ResponseWriter, r *http.Request) {
	var request PackagesCreateRequestObject

	var body PackagesCreateJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PackagesCreate(ctx, request.(PackagesCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PackagesCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PackagesCreateResponseObject); ok {
		if err := validResponse.VisitPackagesCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TasksRead operation middleware
func (sh *strictHandler) TasksRead(w http.ResponseWriter, r *http.Request, id UUID) {
	var request TasksReadRequestObject

	request.ID = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TasksRead(ctx, request.(TasksReadRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TasksRead")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TasksReadResponseObject); ok {
		if err := validResponse.VisitTasksReadResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ValidateCreate operation middleware
func (sh *strictHandler) ValidateCreate(w http.ResponseWriter, r *http.Request, validator V2BetaValidateValidator) {
	var request ValidateCreateRequestObject

	request.Validator = validator

	request.Body = r.Body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ValidateCreate(ctx, request.(ValidateCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidateCreate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ValidateCreateResponseObject); ok {
		if err := validResponse.VisitValidateCreateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0RdjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
