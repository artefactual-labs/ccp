// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// LocationPurposeAR is a LocationPurpose of type AR.
	LocationPurposeAR LocationPurpose = iota
	// LocationPurposeAS is a LocationPurpose of type AS.
	LocationPurposeAS
	// LocationPurposeCP is a LocationPurpose of type CP.
	LocationPurposeCP
	// LocationPurposeDS is a LocationPurpose of type DS.
	LocationPurposeDS
	// LocationPurposeSD is a LocationPurpose of type SD.
	LocationPurposeSD
	// LocationPurposeSS is a LocationPurpose of type SS.
	LocationPurposeSS
	// LocationPurposeBL is a LocationPurpose of type BL.
	LocationPurposeBL
	// LocationPurposeTS is a LocationPurpose of type TS.
	LocationPurposeTS
	// LocationPurposeRP is a LocationPurpose of type RP.
	LocationPurposeRP
)

var ErrInvalidLocationPurpose = fmt.Errorf("not a valid LocationPurpose, try [%s]", strings.Join(_LocationPurposeNames, ", "))

const _LocationPurposeName = "ARASCPDSSDSSBLTSRP"

var _LocationPurposeNames = []string{
	_LocationPurposeName[0:2],
	_LocationPurposeName[2:4],
	_LocationPurposeName[4:6],
	_LocationPurposeName[6:8],
	_LocationPurposeName[8:10],
	_LocationPurposeName[10:12],
	_LocationPurposeName[12:14],
	_LocationPurposeName[14:16],
	_LocationPurposeName[16:18],
}

// LocationPurposeNames returns a list of possible string values of LocationPurpose.
func LocationPurposeNames() []string {
	tmp := make([]string, len(_LocationPurposeNames))
	copy(tmp, _LocationPurposeNames)
	return tmp
}

var _LocationPurposeMap = map[LocationPurpose]string{
	LocationPurposeAR: _LocationPurposeName[0:2],
	LocationPurposeAS: _LocationPurposeName[2:4],
	LocationPurposeCP: _LocationPurposeName[4:6],
	LocationPurposeDS: _LocationPurposeName[6:8],
	LocationPurposeSD: _LocationPurposeName[8:10],
	LocationPurposeSS: _LocationPurposeName[10:12],
	LocationPurposeBL: _LocationPurposeName[12:14],
	LocationPurposeTS: _LocationPurposeName[14:16],
	LocationPurposeRP: _LocationPurposeName[16:18],
}

// String implements the Stringer interface.
func (x LocationPurpose) String() string {
	if str, ok := _LocationPurposeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("LocationPurpose(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LocationPurpose) IsValid() bool {
	_, ok := _LocationPurposeMap[x]
	return ok
}

var _LocationPurposeValue = map[string]LocationPurpose{
	_LocationPurposeName[0:2]:                    LocationPurposeAR,
	strings.ToLower(_LocationPurposeName[0:2]):   LocationPurposeAR,
	_LocationPurposeName[2:4]:                    LocationPurposeAS,
	strings.ToLower(_LocationPurposeName[2:4]):   LocationPurposeAS,
	_LocationPurposeName[4:6]:                    LocationPurposeCP,
	strings.ToLower(_LocationPurposeName[4:6]):   LocationPurposeCP,
	_LocationPurposeName[6:8]:                    LocationPurposeDS,
	strings.ToLower(_LocationPurposeName[6:8]):   LocationPurposeDS,
	_LocationPurposeName[8:10]:                   LocationPurposeSD,
	strings.ToLower(_LocationPurposeName[8:10]):  LocationPurposeSD,
	_LocationPurposeName[10:12]:                  LocationPurposeSS,
	strings.ToLower(_LocationPurposeName[10:12]): LocationPurposeSS,
	_LocationPurposeName[12:14]:                  LocationPurposeBL,
	strings.ToLower(_LocationPurposeName[12:14]): LocationPurposeBL,
	_LocationPurposeName[14:16]:                  LocationPurposeTS,
	strings.ToLower(_LocationPurposeName[14:16]): LocationPurposeTS,
	_LocationPurposeName[16:18]:                  LocationPurposeRP,
	strings.ToLower(_LocationPurposeName[16:18]): LocationPurposeRP,
}

// ParseLocationPurpose attempts to convert a string to a LocationPurpose.
func ParseLocationPurpose(name string) (LocationPurpose, error) {
	if x, ok := _LocationPurposeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LocationPurposeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return LocationPurpose(0), fmt.Errorf("%s is %w", name, ErrInvalidLocationPurpose)
}

func (x LocationPurpose) Ptr() *LocationPurpose {
	return &x
}

// MarshalText implements the text marshaller method.
func (x LocationPurpose) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *LocationPurpose) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLocationPurpose(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errLocationPurposeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *LocationPurpose) Scan(value interface{}) (err error) {
	if value == nil {
		*x = LocationPurpose(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = LocationPurpose(v)
	case string:
		*x, err = ParseLocationPurpose(v)
	case []byte:
		*x, err = ParseLocationPurpose(string(v))
	case LocationPurpose:
		*x = v
	case int:
		*x = LocationPurpose(v)
	case *LocationPurpose:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = *v
	case uint:
		*x = LocationPurpose(v)
	case uint64:
		*x = LocationPurpose(v)
	case *int:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = LocationPurpose(*v)
	case *int64:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = LocationPurpose(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = LocationPurpose(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = LocationPurpose(*v)
	case *uint:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = LocationPurpose(*v)
	case *uint64:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x = LocationPurpose(*v)
	case *string:
		if v == nil {
			return errLocationPurposeNilPtr
		}
		*x, err = ParseLocationPurpose(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x LocationPurpose) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *LocationPurpose) Set(val string) error {
	v, err := ParseLocationPurpose(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *LocationPurpose) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *LocationPurpose) Type() string {
	return "LocationPurpose"
}
