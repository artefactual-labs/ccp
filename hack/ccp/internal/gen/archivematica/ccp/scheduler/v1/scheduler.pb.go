// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: archivematica/ccp/scheduler/v1/scheduler.proto

package schedulerv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WorkRequest is sent by the worker.
type WorkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*WorkRequest_CanDo_
	//	*WorkRequest_PreSleep_
	//	*WorkRequest_GrabJob_
	//	*WorkRequest_SetClientId_
	Request isWorkRequest_Request `protobuf_oneof:"request"`
}

func (x *WorkRequest) Reset() {
	*x = WorkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest) ProtoMessage() {}

func (x *WorkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest.ProtoReflect.Descriptor instead.
func (*WorkRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0}
}

func (m *WorkRequest) GetRequest() isWorkRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *WorkRequest) GetCanDo() *WorkRequest_CanDo {
	if x, ok := x.GetRequest().(*WorkRequest_CanDo_); ok {
		return x.CanDo
	}
	return nil
}

func (x *WorkRequest) GetPreSleep() *WorkRequest_PreSleep {
	if x, ok := x.GetRequest().(*WorkRequest_PreSleep_); ok {
		return x.PreSleep
	}
	return nil
}

func (x *WorkRequest) GetGrabJob() *WorkRequest_GrabJob {
	if x, ok := x.GetRequest().(*WorkRequest_GrabJob_); ok {
		return x.GrabJob
	}
	return nil
}

func (x *WorkRequest) GetSetClientId() *WorkRequest_SetClientId {
	if x, ok := x.GetRequest().(*WorkRequest_SetClientId_); ok {
		return x.SetClientId
	}
	return nil
}

type isWorkRequest_Request interface {
	isWorkRequest_Request()
}

type WorkRequest_CanDo_ struct {
	CanDo *WorkRequest_CanDo `protobuf:"bytes,1,opt,name=can_do,json=canDo,proto3,oneof"` // CAN_DO - notify the scheduler that the worker is able to perform the given function.
}

type WorkRequest_PreSleep_ struct {
	PreSleep *WorkRequest_PreSleep `protobuf:"bytes,2,opt,name=pre_sleep,json=preSleep,proto3,oneof"` // PRE_SLEEP - notify the scheduler that the worker is about to sleep, and that it should be woken up with a NOOP.
}

type WorkRequest_GrabJob_ struct {
	GrabJob *WorkRequest_GrabJob `protobuf:"bytes,3,opt,name=grab_job,json=grabJob,proto3,oneof"` // GRAB_JOB - request the scheduler any available jobs on the queue. The server will respond with either NO_JOB or JOB_ASSIGN.
}

type WorkRequest_SetClientId_ struct {
	SetClientId *WorkRequest_SetClientId `protobuf:"bytes,4,opt,name=set_client_id,json=setClientId,proto3,oneof"` // SET_CLIENT_ID - sents the worker ID in the scheduler.
}

func (*WorkRequest_CanDo_) isWorkRequest_Request() {}

func (*WorkRequest_PreSleep_) isWorkRequest_Request() {}

func (*WorkRequest_GrabJob_) isWorkRequest_Request() {}

func (*WorkRequest_SetClientId_) isWorkRequest_Request() {}

// WorkResponse is sent by the scheduler.
type WorkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*WorkResponse_NoOp_
	//	*WorkResponse_NoJob_
	//	*WorkResponse_JobAssign_
	Response isWorkResponse_Response `protobuf_oneof:"response"`
}

func (x *WorkResponse) Reset() {
	*x = WorkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse) ProtoMessage() {}

func (x *WorkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse.ProtoReflect.Descriptor instead.
func (*WorkResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{1}
}

func (m *WorkResponse) GetResponse() isWorkResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *WorkResponse) GetNoOp() *WorkResponse_NoOp {
	if x, ok := x.GetResponse().(*WorkResponse_NoOp_); ok {
		return x.NoOp
	}
	return nil
}

func (x *WorkResponse) GetNoJob() *WorkResponse_NoJob {
	if x, ok := x.GetResponse().(*WorkResponse_NoJob_); ok {
		return x.NoJob
	}
	return nil
}

func (x *WorkResponse) GetJobAssign() *WorkResponse_JobAssign {
	if x, ok := x.GetResponse().(*WorkResponse_JobAssign_); ok {
		return x.JobAssign
	}
	return nil
}

type isWorkResponse_Response interface {
	isWorkResponse_Response()
}

type WorkResponse_NoOp_ struct {
	NoOp *WorkResponse_NoOp `protobuf:"bytes,1,opt,name=no_op,json=noOp,proto3,oneof"` // NOOP - wake up a sleeping worker so that it may grab a pending job.
}

type WorkResponse_NoJob_ struct {
	NoJob *WorkResponse_NoJob `protobuf:"bytes,2,opt,name=no_job,json=noJob,proto3,oneof"` // NO_JOB - in response to a GRAB_JOB request to notify the worker there are no pending jobs that need to run.
}

type WorkResponse_JobAssign_ struct {
	JobAssign *WorkResponse_JobAssign `protobuf:"bytes,3,opt,name=job_assign,json=jobAssign,proto3,oneof"` // JOB_ASSIGN - in response to a GRAB_JOB request to give the worker information needed to run the job.
}

func (*WorkResponse_NoOp_) isWorkResponse_Response() {}

func (*WorkResponse_NoJob_) isWorkResponse_Response() {}

func (*WorkResponse_JobAssign_) isWorkResponse_Response() {}

type WorkRequest_CanDo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function string `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *WorkRequest_CanDo) Reset() {
	*x = WorkRequest_CanDo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_CanDo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_CanDo) ProtoMessage() {}

func (x *WorkRequest_CanDo) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_CanDo.ProtoReflect.Descriptor instead.
func (*WorkRequest_CanDo) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0, 0}
}

func (x *WorkRequest_CanDo) GetFunction() string {
	if x != nil {
		return x.Function
	}
	return ""
}

type WorkRequest_PreSleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkRequest_PreSleep) Reset() {
	*x = WorkRequest_PreSleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_PreSleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_PreSleep) ProtoMessage() {}

func (x *WorkRequest_PreSleep) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_PreSleep.ProtoReflect.Descriptor instead.
func (*WorkRequest_PreSleep) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0, 1}
}

type WorkRequest_GrabJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkRequest_GrabJob) Reset() {
	*x = WorkRequest_GrabJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_GrabJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_GrabJob) ProtoMessage() {}

func (x *WorkRequest_GrabJob) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_GrabJob.ProtoReflect.Descriptor instead.
func (*WorkRequest_GrabJob) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0, 2}
}

type WorkRequest_SetClientId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *WorkRequest_SetClientId) Reset() {
	*x = WorkRequest_SetClientId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkRequest_SetClientId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkRequest_SetClientId) ProtoMessage() {}

func (x *WorkRequest_SetClientId) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkRequest_SetClientId.ProtoReflect.Descriptor instead.
func (*WorkRequest_SetClientId) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{0, 3}
}

func (x *WorkRequest_SetClientId) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type WorkResponse_NoOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkResponse_NoOp) Reset() {
	*x = WorkResponse_NoOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse_NoOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse_NoOp) ProtoMessage() {}

func (x *WorkResponse_NoOp) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse_NoOp.ProtoReflect.Descriptor instead.
func (*WorkResponse_NoOp) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{1, 0}
}

type WorkResponse_NoJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkResponse_NoJob) Reset() {
	*x = WorkResponse_NoJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse_NoJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse_NoJob) ProtoMessage() {}

func (x *WorkResponse_NoJob) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse_NoJob.ProtoReflect.Descriptor instead.
func (*WorkResponse_NoJob) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{1, 1}
}

type WorkResponse_JobAssign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobHandle    string `protobuf:"bytes,1,opt,name=job_handle,json=jobHandle,proto3" json:"job_handle,omitempty"`          // Job handle, a unique identifier for the job
	FunctionName string `protobuf:"bytes,2,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"` // Name of the function the worker should perform
	Workload     []byte `protobuf:"bytes,3,opt,name=workload,proto3" json:"workload,omitempty"`                             // Workload for the job, can be binary data
}

func (x *WorkResponse_JobAssign) Reset() {
	*x = WorkResponse_JobAssign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkResponse_JobAssign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkResponse_JobAssign) ProtoMessage() {}

func (x *WorkResponse_JobAssign) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkResponse_JobAssign.ProtoReflect.Descriptor instead.
func (*WorkResponse_JobAssign) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP(), []int{1, 2}
}

func (x *WorkResponse_JobAssign) GetJobHandle() string {
	if x != nil {
		return x.JobHandle
	}
	return ""
}

func (x *WorkResponse_JobAssign) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *WorkResponse_JobAssign) GetWorkload() []byte {
	if x != nil {
		return x.Workload
	}
	return nil
}

var File_archivematica_ccp_scheduler_v1_scheduler_proto protoreflect.FileDescriptor

var file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e,
	0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x22, 0xd2, 0x03, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61,
	0x6e, 0x44, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x12, 0x53, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e,
	0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x65,
	0x53, 0x6c, 0x65, 0x65, 0x70, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x65, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x12, 0x50, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x62, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x47, 0x72, 0x61, 0x62, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x61, 0x62,
	0x4a, 0x6f, 0x62, 0x12, 0x5d, 0x0a, 0x0d, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x1a, 0x23, 0x0a, 0x05, 0x43, 0x61, 0x6e, 0x44, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x53, 0x6c,
	0x65, 0x65, 0x70, 0x1a, 0x09, 0x0a, 0x07, 0x47, 0x72, 0x61, 0x62, 0x4a, 0x6f, 0x62, 0x1a, 0x2a,
	0x0a, 0x0b, 0x53, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x03, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x6e, 0x6f, 0x5f, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x4f, 0x70, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x4f, 0x70,
	0x12, 0x4b, 0x0a, 0x06, 0x6e, 0x6f, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e,
	0x6f, 0x4a, 0x6f, 0x62, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x4a, 0x6f, 0x62, 0x12, 0x57, 0x0a,
	0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x4a, 0x6f, 0x62, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f, 0x62,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x1a, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x4f, 0x70, 0x1a, 0x07,
	0x0a, 0x05, 0x4e, 0x6f, 0x4a, 0x6f, 0x62, 0x1a, 0x6b, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x7b, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x04, 0x57, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70,
	0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0xb6, 0x02,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2f, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x68, 0x61, 0x63,
	0x6b, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2f, 0x63, 0x63, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x76,
	0x31, 0x3b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x41, 0x43, 0x53, 0xaa, 0x02, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x43, 0x63, 0x70, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x2a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x21, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x3a, 0x3a, 0x43, 0x63, 0x70, 0x3a, 0x3a, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescOnce sync.Once
	file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescData = file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDesc
)

func file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescGZIP() []byte {
	file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescOnce.Do(func() {
		file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescData = protoimpl.X.CompressGZIP(file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescData)
	})
	return file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDescData
}

var file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_archivematica_ccp_scheduler_v1_scheduler_proto_goTypes = []interface{}{
	(*WorkRequest)(nil),             // 0: archivematica.ccp.scheduler.v1.WorkRequest
	(*WorkResponse)(nil),            // 1: archivematica.ccp.scheduler.v1.WorkResponse
	(*WorkRequest_CanDo)(nil),       // 2: archivematica.ccp.scheduler.v1.WorkRequest.CanDo
	(*WorkRequest_PreSleep)(nil),    // 3: archivematica.ccp.scheduler.v1.WorkRequest.PreSleep
	(*WorkRequest_GrabJob)(nil),     // 4: archivematica.ccp.scheduler.v1.WorkRequest.GrabJob
	(*WorkRequest_SetClientId)(nil), // 5: archivematica.ccp.scheduler.v1.WorkRequest.SetClientId
	(*WorkResponse_NoOp)(nil),       // 6: archivematica.ccp.scheduler.v1.WorkResponse.NoOp
	(*WorkResponse_NoJob)(nil),      // 7: archivematica.ccp.scheduler.v1.WorkResponse.NoJob
	(*WorkResponse_JobAssign)(nil),  // 8: archivematica.ccp.scheduler.v1.WorkResponse.JobAssign
}
var file_archivematica_ccp_scheduler_v1_scheduler_proto_depIdxs = []int32{
	2, // 0: archivematica.ccp.scheduler.v1.WorkRequest.can_do:type_name -> archivematica.ccp.scheduler.v1.WorkRequest.CanDo
	3, // 1: archivematica.ccp.scheduler.v1.WorkRequest.pre_sleep:type_name -> archivematica.ccp.scheduler.v1.WorkRequest.PreSleep
	4, // 2: archivematica.ccp.scheduler.v1.WorkRequest.grab_job:type_name -> archivematica.ccp.scheduler.v1.WorkRequest.GrabJob
	5, // 3: archivematica.ccp.scheduler.v1.WorkRequest.set_client_id:type_name -> archivematica.ccp.scheduler.v1.WorkRequest.SetClientId
	6, // 4: archivematica.ccp.scheduler.v1.WorkResponse.no_op:type_name -> archivematica.ccp.scheduler.v1.WorkResponse.NoOp
	7, // 5: archivematica.ccp.scheduler.v1.WorkResponse.no_job:type_name -> archivematica.ccp.scheduler.v1.WorkResponse.NoJob
	8, // 6: archivematica.ccp.scheduler.v1.WorkResponse.job_assign:type_name -> archivematica.ccp.scheduler.v1.WorkResponse.JobAssign
	0, // 7: archivematica.ccp.scheduler.v1.SchedulerService.Work:input_type -> archivematica.ccp.scheduler.v1.WorkRequest
	1, // 8: archivematica.ccp.scheduler.v1.SchedulerService.Work:output_type -> archivematica.ccp.scheduler.v1.WorkResponse
	8, // [8:9] is the sub-list for method output_type
	7, // [7:8] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_archivematica_ccp_scheduler_v1_scheduler_proto_init() }
func file_archivematica_ccp_scheduler_v1_scheduler_proto_init() {
	if File_archivematica_ccp_scheduler_v1_scheduler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_CanDo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_PreSleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_GrabJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkRequest_SetClientId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse_NoOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse_NoJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkResponse_JobAssign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WorkRequest_CanDo_)(nil),
		(*WorkRequest_PreSleep_)(nil),
		(*WorkRequest_GrabJob_)(nil),
		(*WorkRequest_SetClientId_)(nil),
	}
	file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*WorkResponse_NoOp_)(nil),
		(*WorkResponse_NoJob_)(nil),
		(*WorkResponse_JobAssign_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_archivematica_ccp_scheduler_v1_scheduler_proto_goTypes,
		DependencyIndexes: file_archivematica_ccp_scheduler_v1_scheduler_proto_depIdxs,
		MessageInfos:      file_archivematica_ccp_scheduler_v1_scheduler_proto_msgTypes,
	}.Build()
	File_archivematica_ccp_scheduler_v1_scheduler_proto = out.File
	file_archivematica_ccp_scheduler_v1_scheduler_proto_rawDesc = nil
	file_archivematica_ccp_scheduler_v1_scheduler_proto_goTypes = nil
	file_archivematica_ccp_scheduler_v1_scheduler_proto_depIdxs = nil
}
