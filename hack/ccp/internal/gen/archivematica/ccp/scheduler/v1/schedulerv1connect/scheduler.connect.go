// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: archivematica/ccp/scheduler/v1/scheduler.proto

package schedulerv1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/artefactual/archivematica/hack/ccp/internal/gen/archivematica/ccp/scheduler/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SchedulerServiceName is the fully-qualified name of the SchedulerService service.
	SchedulerServiceName = "archivematica.ccp.scheduler.v1.SchedulerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SchedulerServiceSayProcedure is the fully-qualified name of the SchedulerService's Say RPC.
	SchedulerServiceSayProcedure = "/archivematica.ccp.scheduler.v1.SchedulerService/Say"
)

// SchedulerServiceClient is a client for the archivematica.ccp.scheduler.v1.SchedulerService
// service.
type SchedulerServiceClient interface {
	// Say is a unary request demo.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
}

// NewSchedulerServiceClient constructs a client for the
// archivematica.ccp.scheduler.v1.SchedulerService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSchedulerServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SchedulerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &schedulerServiceClient{
		say: connect_go.NewClient[v1.SayRequest, v1.SayResponse](
			httpClient,
			baseURL+SchedulerServiceSayProcedure,
			opts...,
		),
	}
}

// schedulerServiceClient implements SchedulerServiceClient.
type schedulerServiceClient struct {
	say *connect_go.Client[v1.SayRequest, v1.SayResponse]
}

// Say calls archivematica.ccp.scheduler.v1.SchedulerService.Say.
func (c *schedulerServiceClient) Say(ctx context.Context, req *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return c.say.CallUnary(ctx, req)
}

// SchedulerServiceHandler is an implementation of the
// archivematica.ccp.scheduler.v1.SchedulerService service.
type SchedulerServiceHandler interface {
	// Say is a unary request demo.
	Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error)
}

// NewSchedulerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSchedulerServiceHandler(svc SchedulerServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(SchedulerServiceSayProcedure, connect_go.NewUnaryHandler(
		SchedulerServiceSayProcedure,
		svc.Say,
		opts...,
	))
	return "/archivematica.ccp.scheduler.v1.SchedulerService/", mux
}

// UnimplementedSchedulerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSchedulerServiceHandler struct{}

func (UnimplementedSchedulerServiceHandler) Say(context.Context, *connect_go.Request[v1.SayRequest]) (*connect_go.Response[v1.SayResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("archivematica.ccp.scheduler.v1.SchedulerService.Say is not implemented"))
}
