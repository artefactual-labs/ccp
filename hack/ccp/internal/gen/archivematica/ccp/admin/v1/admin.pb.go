// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: archivematica/ccp/admin/v1/admin.proto

package adminv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListActivePackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListActivePackagesRequest) Reset() {
	*x = ListActivePackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivePackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivePackagesRequest) ProtoMessage() {}

func (x *ListActivePackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivePackagesRequest.ProtoReflect.Descriptor instead.
func (*ListActivePackagesRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{0}
}

type ListActivePackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListActivePackagesResponse) Reset() {
	*x = ListActivePackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListActivePackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListActivePackagesResponse) ProtoMessage() {}

func (x *ListActivePackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListActivePackagesResponse.ProtoReflect.Descriptor instead.
func (*ListActivePackagesResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{1}
}

func (x *ListActivePackagesResponse) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ListAwaitingDecisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAwaitingDecisionsRequest) Reset() {
	*x = ListAwaitingDecisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAwaitingDecisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAwaitingDecisionsRequest) ProtoMessage() {}

func (x *ListAwaitingDecisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAwaitingDecisionsRequest.ProtoReflect.Descriptor instead.
func (*ListAwaitingDecisionsRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{2}
}

type ListAwaitingDecisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *ListAwaitingDecisionsResponse) Reset() {
	*x = ListAwaitingDecisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAwaitingDecisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAwaitingDecisionsResponse) ProtoMessage() {}

func (x *ListAwaitingDecisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAwaitingDecisionsResponse.ProtoReflect.Descriptor instead.
func (*ListAwaitingDecisionsResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{3}
}

func (x *ListAwaitingDecisionsResponse) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type ResolveAwaitingDecisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveAwaitingDecisionRequest) Reset() {
	*x = ResolveAwaitingDecisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAwaitingDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAwaitingDecisionRequest) ProtoMessage() {}

func (x *ResolveAwaitingDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAwaitingDecisionRequest.ProtoReflect.Descriptor instead.
func (*ResolveAwaitingDecisionRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{4}
}

type ResolveAwaitingDecisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveAwaitingDecisionResponse) Reset() {
	*x = ResolveAwaitingDecisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveAwaitingDecisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveAwaitingDecisionResponse) ProtoMessage() {}

func (x *ResolveAwaitingDecisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveAwaitingDecisionResponse.ProtoReflect.Descriptor instead.
func (*ResolveAwaitingDecisionResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP(), []int{5}
}

var File_archivematica_ccp_admin_v1_admin_proto protoreflect.FileDescriptor

var file_archivematica_ccp_admin_v1_admin_proto_rawDesc = []byte{
	0x0a, 0x26, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x32, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x1e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x21,
	0x0a, 0x1f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0xbe, 0x03, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x15, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x17,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x96, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x2f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x2f, 0x63,
	0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63,
	0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x41, 0xaa, 0x02, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x43, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1d, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x3a, 0x3a, 0x43, 0x63, 0x70,
	0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_archivematica_ccp_admin_v1_admin_proto_rawDescOnce sync.Once
	file_archivematica_ccp_admin_v1_admin_proto_rawDescData = file_archivematica_ccp_admin_v1_admin_proto_rawDesc
)

func file_archivematica_ccp_admin_v1_admin_proto_rawDescGZIP() []byte {
	file_archivematica_ccp_admin_v1_admin_proto_rawDescOnce.Do(func() {
		file_archivematica_ccp_admin_v1_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_archivematica_ccp_admin_v1_admin_proto_rawDescData)
	})
	return file_archivematica_ccp_admin_v1_admin_proto_rawDescData
}

var file_archivematica_ccp_admin_v1_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_archivematica_ccp_admin_v1_admin_proto_goTypes = []interface{}{
	(*ListActivePackagesRequest)(nil),       // 0: archivematica.ccp.admin.v1.ListActivePackagesRequest
	(*ListActivePackagesResponse)(nil),      // 1: archivematica.ccp.admin.v1.ListActivePackagesResponse
	(*ListAwaitingDecisionsRequest)(nil),    // 2: archivematica.ccp.admin.v1.ListAwaitingDecisionsRequest
	(*ListAwaitingDecisionsResponse)(nil),   // 3: archivematica.ccp.admin.v1.ListAwaitingDecisionsResponse
	(*ResolveAwaitingDecisionRequest)(nil),  // 4: archivematica.ccp.admin.v1.ResolveAwaitingDecisionRequest
	(*ResolveAwaitingDecisionResponse)(nil), // 5: archivematica.ccp.admin.v1.ResolveAwaitingDecisionResponse
}
var file_archivematica_ccp_admin_v1_admin_proto_depIdxs = []int32{
	0, // 0: archivematica.ccp.admin.v1.AdminService.ListActivePackages:input_type -> archivematica.ccp.admin.v1.ListActivePackagesRequest
	2, // 1: archivematica.ccp.admin.v1.AdminService.ListAwaitingDecisions:input_type -> archivematica.ccp.admin.v1.ListAwaitingDecisionsRequest
	4, // 2: archivematica.ccp.admin.v1.AdminService.ResolveAwaitingDecision:input_type -> archivematica.ccp.admin.v1.ResolveAwaitingDecisionRequest
	1, // 3: archivematica.ccp.admin.v1.AdminService.ListActivePackages:output_type -> archivematica.ccp.admin.v1.ListActivePackagesResponse
	3, // 4: archivematica.ccp.admin.v1.AdminService.ListAwaitingDecisions:output_type -> archivematica.ccp.admin.v1.ListAwaitingDecisionsResponse
	5, // 5: archivematica.ccp.admin.v1.AdminService.ResolveAwaitingDecision:output_type -> archivematica.ccp.admin.v1.ResolveAwaitingDecisionResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_archivematica_ccp_admin_v1_admin_proto_init() }
func file_archivematica_ccp_admin_v1_admin_proto_init() {
	if File_archivematica_ccp_admin_v1_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivePackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListActivePackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAwaitingDecisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAwaitingDecisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAwaitingDecisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveAwaitingDecisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_archivematica_ccp_admin_v1_admin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_archivematica_ccp_admin_v1_admin_proto_goTypes,
		DependencyIndexes: file_archivematica_ccp_admin_v1_admin_proto_depIdxs,
		MessageInfos:      file_archivematica_ccp_admin_v1_admin_proto_msgTypes,
	}.Build()
	File_archivematica_ccp_admin_v1_admin_proto = out.File
	file_archivematica_ccp_admin_v1_admin_proto_rawDesc = nil
	file_archivematica_ccp_admin_v1_admin_proto_goTypes = nil
	file_archivematica_ccp_admin_v1_admin_proto_depIdxs = nil
}
