// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: archivematica/ccp/admin/v1beta1/service.proto

package adminv1beta1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the transfer.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the transfer, default to "standard".
	Type TransferType `protobuf:"varint,2,opt,name=type,proto3,enum=archivematica.ccp.admin.v1beta1.TransferType" json:"type,omitempty"`
	// Identifier of the accession.
	Accession string `protobuf:"bytes,3,opt,name=accession,proto3" json:"accession,omitempty"`
	// Identifier in the access system.
	AccessSystemId string `protobuf:"bytes,4,opt,name=access_system_id,json=accessSystemId,proto3" json:"access_system_id,omitempty"`
	// List of <location_uuid>:<relative_path> to be included in the transfer.
	// Locations should be associated with this pipeline, and relative path should
	// be relative to the location. The strings should be base64-encoded.
	Path []string `protobuf:"bytes,5,rep,name=path,proto3" json:"path,omitempty"`
	// The identifier (UUIDv4) of the metadata set to be included.
	// An empty string is not a valid UUID, use null instead (default).
	MetadataSetId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=metadata_set_id,json=metadataSetId,proto3" json:"metadata_set_id,omitempty"`
	// Name of the processing configuration file to be included.
	ProcessingConfig string `protobuf:"bytes,7,opt,name=processing_config,json=processingConfig,proto3" json:"processing_config,omitempty"`
}

func (x *CreatePackageRequest) Reset() {
	*x = CreatePackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePackageRequest) ProtoMessage() {}

func (x *CreatePackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePackageRequest.ProtoReflect.Descriptor instead.
func (*CreatePackageRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePackageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePackageRequest) GetType() TransferType {
	if x != nil {
		return x.Type
	}
	return TransferType_TRANSFER_TYPE_UNSPECIFIED
}

func (x *CreatePackageRequest) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *CreatePackageRequest) GetAccessSystemId() string {
	if x != nil {
		return x.AccessSystemId
	}
	return ""
}

func (x *CreatePackageRequest) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *CreatePackageRequest) GetMetadataSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.MetadataSetId
	}
	return nil
}

func (x *CreatePackageRequest) GetProcessingConfig() string {
	if x != nil {
		return x.ProcessingConfig
	}
	return ""
}

type CreatePackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the package (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePackageResponse) Reset() {
	*x = CreatePackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePackageResponse) ProtoMessage() {}

func (x *CreatePackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePackageResponse.ProtoReflect.Descriptor instead.
func (*CreatePackageResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePackageResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadPackageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the package (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadPackageRequest) Reset() {
	*x = ReadPackageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPackageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPackageRequest) ProtoMessage() {}

func (x *ReadPackageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPackageRequest.ProtoReflect.Descriptor instead.
func (*ReadPackageRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{2}
}

func (x *ReadPackageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadPackageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pkg *Package `protobuf:"bytes,1,opt,name=pkg,proto3" json:"pkg,omitempty"`
	// List of awaiting decisions related to this package.
	// Only used if the status of the package is AWAITING_DECISION.
	Decision []*Decision `protobuf:"bytes,2,rep,name=decision,proto3" json:"decision,omitempty"`
}

func (x *ReadPackageResponse) Reset() {
	*x = ReadPackageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadPackageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadPackageResponse) ProtoMessage() {}

func (x *ReadPackageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadPackageResponse.ProtoReflect.Descriptor instead.
func (*ReadPackageResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{3}
}

func (x *ReadPackageResponse) GetPkg() *Package {
	if x != nil {
		return x.Pkg
	}
	return nil
}

func (x *ReadPackageResponse) GetDecision() []*Decision {
	if x != nil {
		return x.Decision
	}
	return nil
}

type ListPackagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=archivematica.ccp.admin.v1beta1.PackageType" json:"type,omitempty"`
	ExcludeHidden bool        `protobuf:"varint,2,opt,name=exclude_hidden,json=excludeHidden,proto3" json:"exclude_hidden,omitempty"`
}

func (x *ListPackagesRequest) Reset() {
	*x = ListPackagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackagesRequest) ProtoMessage() {}

func (x *ListPackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackagesRequest.ProtoReflect.Descriptor instead.
func (*ListPackagesRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListPackagesRequest) GetType() PackageType {
	if x != nil {
		return x.Type
	}
	return PackageType_PACKAGE_TYPE_UNSPECIFIED
}

func (x *ListPackagesRequest) GetExcludeHidden() bool {
	if x != nil {
		return x.ExcludeHidden
	}
	return false
}

type ListPackagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package []*Package `protobuf:"bytes,1,rep,name=package,proto3" json:"package,omitempty"`
}

func (x *ListPackagesResponse) Reset() {
	*x = ListPackagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPackagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPackagesResponse) ProtoMessage() {}

func (x *ListPackagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPackagesResponse.ProtoReflect.Descriptor instead.
func (*ListPackagesResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListPackagesResponse) GetPackage() []*Package {
	if x != nil {
		return x.Package
	}
	return nil
}

type ListDecisionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListDecisionsRequest) Reset() {
	*x = ListDecisionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecisionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecisionsRequest) ProtoMessage() {}

func (x *ListDecisionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecisionsRequest.ProtoReflect.Descriptor instead.
func (*ListDecisionsRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{6}
}

type ListDecisionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Decision []*Decision `protobuf:"bytes,1,rep,name=decision,proto3" json:"decision,omitempty"`
}

func (x *ListDecisionsResponse) Reset() {
	*x = ListDecisionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDecisionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDecisionsResponse) ProtoMessage() {}

func (x *ListDecisionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDecisionsResponse.ProtoReflect.Descriptor instead.
func (*ListDecisionsResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListDecisionsResponse) GetDecision() []*Decision {
	if x != nil {
		return x.Decision
	}
	return nil
}

type ResolveDecisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the decision (UUIDv4).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The choice to be used to resolve the decision.
	Choice *Choice `protobuf:"bytes,2,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *ResolveDecisionRequest) Reset() {
	*x = ResolveDecisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveDecisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDecisionRequest) ProtoMessage() {}

func (x *ResolveDecisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDecisionRequest.ProtoReflect.Descriptor instead.
func (*ResolveDecisionRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{8}
}

func (x *ResolveDecisionRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResolveDecisionRequest) GetChoice() *Choice {
	if x != nil {
		return x.Choice
	}
	return nil
}

type ResolveDecisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveDecisionResponse) Reset() {
	*x = ResolveDecisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveDecisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDecisionResponse) ProtoMessage() {}

func (x *ResolveDecisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDecisionResponse.ProtoReflect.Descriptor instead.
func (*ResolveDecisionResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{9}
}

type ListProcessingConfigurationFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListProcessingConfigurationFieldsRequest) Reset() {
	*x = ListProcessingConfigurationFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessingConfigurationFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessingConfigurationFieldsRequest) ProtoMessage() {}

func (x *ListProcessingConfigurationFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessingConfigurationFieldsRequest.ProtoReflect.Descriptor instead.
func (*ListProcessingConfigurationFieldsRequest) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{10}
}

type ListProcessingConfigurationFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field []*ProcessingConfigField `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *ListProcessingConfigurationFieldsResponse) Reset() {
	*x = ListProcessingConfigurationFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProcessingConfigurationFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProcessingConfigurationFieldsResponse) ProtoMessage() {}

func (x *ListProcessingConfigurationFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProcessingConfigurationFieldsResponse.ProtoReflect.Descriptor instead.
func (*ListProcessingConfigurationFieldsResponse) Descriptor() ([]byte, []int) {
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListProcessingConfigurationFieldsResponse) GetField() []*ProcessingConfigField {
	if x != nil {
		return x.Field
	}
	return nil
}

var File_archivematica_ccp_admin_v1beta1_service_proto protoreflect.FileDescriptor

var file_archivematica_ccp_admin_v1beta1_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x1a, 0x2b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f,
	0x63, 0x63, 0x70, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63, 0x70,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x64,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10,
	0x92, 0x01, 0x0d, 0x08, 0x01, 0x10, 0xf4, 0x03, 0x18, 0x01, 0x22, 0x04, 0x72, 0x02, 0x10, 0x01,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x31, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x03, 0x70, 0x6b, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x03, 0x70, 0x6b, 0x67, 0x12, 0x45, 0x0a, 0x08, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0xc8, 0x01, 0x01, 0x82, 0x01, 0x06,
	0x10, 0x01, 0x1a, 0x02, 0x01, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x48, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x22, 0x5a, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x19, 0x0a, 0x17,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x79, 0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e,
	0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x92,
	0x0a, 0x0a, 0x0c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x80, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x35, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x33, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x35, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e,
	0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x86, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xbc, 0x01, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x49, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e,
	0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x32, 0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x03, 0x88, 0x02, 0x01, 0x12, 0x9b, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d,
	0x2e, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63,
	0x63, 0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42,
	0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88,
	0x02, 0x01, 0x12, 0x9e, 0x01, 0x0a, 0x16, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63,
	0x70, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x88, 0x02, 0x01, 0x42, 0xb1, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2e, 0x63, 0x63, 0x70, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72, 0x74, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x2d, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x63, 0x63, 0x70, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x2f, 0x63, 0x63, 0x70, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x3b, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x41,
	0xaa, 0x02, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x2e, 0x43, 0x63, 0x70, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x56, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0xca, 0x02, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0xe2, 0x02, 0x2b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x61, 0x5c, 0x43, 0x63, 0x70, 0x5c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x5c, 0x56,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x61, 0x3a, 0x3a, 0x43, 0x63, 0x70, 0x3a, 0x3a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_archivematica_ccp_admin_v1beta1_service_proto_rawDescOnce sync.Once
	file_archivematica_ccp_admin_v1beta1_service_proto_rawDescData = file_archivematica_ccp_admin_v1beta1_service_proto_rawDesc
)

func file_archivematica_ccp_admin_v1beta1_service_proto_rawDescGZIP() []byte {
	file_archivematica_ccp_admin_v1beta1_service_proto_rawDescOnce.Do(func() {
		file_archivematica_ccp_admin_v1beta1_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_archivematica_ccp_admin_v1beta1_service_proto_rawDescData)
	})
	return file_archivematica_ccp_admin_v1beta1_service_proto_rawDescData
}

var file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_archivematica_ccp_admin_v1beta1_service_proto_goTypes = []any{
	(*CreatePackageRequest)(nil),                      // 0: archivematica.ccp.admin.v1beta1.CreatePackageRequest
	(*CreatePackageResponse)(nil),                     // 1: archivematica.ccp.admin.v1beta1.CreatePackageResponse
	(*ReadPackageRequest)(nil),                        // 2: archivematica.ccp.admin.v1beta1.ReadPackageRequest
	(*ReadPackageResponse)(nil),                       // 3: archivematica.ccp.admin.v1beta1.ReadPackageResponse
	(*ListPackagesRequest)(nil),                       // 4: archivematica.ccp.admin.v1beta1.ListPackagesRequest
	(*ListPackagesResponse)(nil),                      // 5: archivematica.ccp.admin.v1beta1.ListPackagesResponse
	(*ListDecisionsRequest)(nil),                      // 6: archivematica.ccp.admin.v1beta1.ListDecisionsRequest
	(*ListDecisionsResponse)(nil),                     // 7: archivematica.ccp.admin.v1beta1.ListDecisionsResponse
	(*ResolveDecisionRequest)(nil),                    // 8: archivematica.ccp.admin.v1beta1.ResolveDecisionRequest
	(*ResolveDecisionResponse)(nil),                   // 9: archivematica.ccp.admin.v1beta1.ResolveDecisionResponse
	(*ListProcessingConfigurationFieldsRequest)(nil),  // 10: archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsRequest
	(*ListProcessingConfigurationFieldsResponse)(nil), // 11: archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsResponse
	(TransferType)(0),                                 // 12: archivematica.ccp.admin.v1beta1.TransferType
	(*wrapperspb.StringValue)(nil),                    // 13: google.protobuf.StringValue
	(*Package)(nil),                                   // 14: archivematica.ccp.admin.v1beta1.Package
	(*Decision)(nil),                                  // 15: archivematica.ccp.admin.v1beta1.Decision
	(PackageType)(0),                                  // 16: archivematica.ccp.admin.v1beta1.PackageType
	(*Choice)(nil),                                    // 17: archivematica.ccp.admin.v1beta1.Choice
	(*ProcessingConfigField)(nil),                     // 18: archivematica.ccp.admin.v1beta1.ProcessingConfigField
	(*ApproveJobRequest)(nil),                         // 19: archivematica.ccp.admin.v1beta1.ApproveJobRequest
	(*ApproveTransferByPathRequest)(nil),              // 20: archivematica.ccp.admin.v1beta1.ApproveTransferByPathRequest
	(*ApprovePartialReingestRequest)(nil),             // 21: archivematica.ccp.admin.v1beta1.ApprovePartialReingestRequest
	(*ApproveJobResponse)(nil),                        // 22: archivematica.ccp.admin.v1beta1.ApproveJobResponse
	(*ApproveTransferByPathResponse)(nil),             // 23: archivematica.ccp.admin.v1beta1.ApproveTransferByPathResponse
	(*ApprovePartialReingestResponse)(nil),            // 24: archivematica.ccp.admin.v1beta1.ApprovePartialReingestResponse
}
var file_archivematica_ccp_admin_v1beta1_service_proto_depIdxs = []int32{
	12, // 0: archivematica.ccp.admin.v1beta1.CreatePackageRequest.type:type_name -> archivematica.ccp.admin.v1beta1.TransferType
	13, // 1: archivematica.ccp.admin.v1beta1.CreatePackageRequest.metadata_set_id:type_name -> google.protobuf.StringValue
	14, // 2: archivematica.ccp.admin.v1beta1.ReadPackageResponse.pkg:type_name -> archivematica.ccp.admin.v1beta1.Package
	15, // 3: archivematica.ccp.admin.v1beta1.ReadPackageResponse.decision:type_name -> archivematica.ccp.admin.v1beta1.Decision
	16, // 4: archivematica.ccp.admin.v1beta1.ListPackagesRequest.type:type_name -> archivematica.ccp.admin.v1beta1.PackageType
	14, // 5: archivematica.ccp.admin.v1beta1.ListPackagesResponse.package:type_name -> archivematica.ccp.admin.v1beta1.Package
	15, // 6: archivematica.ccp.admin.v1beta1.ListDecisionsResponse.decision:type_name -> archivematica.ccp.admin.v1beta1.Decision
	17, // 7: archivematica.ccp.admin.v1beta1.ResolveDecisionRequest.choice:type_name -> archivematica.ccp.admin.v1beta1.Choice
	18, // 8: archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsResponse.field:type_name -> archivematica.ccp.admin.v1beta1.ProcessingConfigField
	0,  // 9: archivematica.ccp.admin.v1beta1.AdminService.CreatePackage:input_type -> archivematica.ccp.admin.v1beta1.CreatePackageRequest
	2,  // 10: archivematica.ccp.admin.v1beta1.AdminService.ReadPackage:input_type -> archivematica.ccp.admin.v1beta1.ReadPackageRequest
	4,  // 11: archivematica.ccp.admin.v1beta1.AdminService.ListPackages:input_type -> archivematica.ccp.admin.v1beta1.ListPackagesRequest
	6,  // 12: archivematica.ccp.admin.v1beta1.AdminService.ListDecisions:input_type -> archivematica.ccp.admin.v1beta1.ListDecisionsRequest
	8,  // 13: archivematica.ccp.admin.v1beta1.AdminService.ResolveDecision:input_type -> archivematica.ccp.admin.v1beta1.ResolveDecisionRequest
	10, // 14: archivematica.ccp.admin.v1beta1.AdminService.ListProcessingConfigurationFields:input_type -> archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsRequest
	19, // 15: archivematica.ccp.admin.v1beta1.AdminService.ApproveJob:input_type -> archivematica.ccp.admin.v1beta1.ApproveJobRequest
	20, // 16: archivematica.ccp.admin.v1beta1.AdminService.ApproveTransferByPath:input_type -> archivematica.ccp.admin.v1beta1.ApproveTransferByPathRequest
	21, // 17: archivematica.ccp.admin.v1beta1.AdminService.ApprovePartialReingest:input_type -> archivematica.ccp.admin.v1beta1.ApprovePartialReingestRequest
	1,  // 18: archivematica.ccp.admin.v1beta1.AdminService.CreatePackage:output_type -> archivematica.ccp.admin.v1beta1.CreatePackageResponse
	3,  // 19: archivematica.ccp.admin.v1beta1.AdminService.ReadPackage:output_type -> archivematica.ccp.admin.v1beta1.ReadPackageResponse
	5,  // 20: archivematica.ccp.admin.v1beta1.AdminService.ListPackages:output_type -> archivematica.ccp.admin.v1beta1.ListPackagesResponse
	7,  // 21: archivematica.ccp.admin.v1beta1.AdminService.ListDecisions:output_type -> archivematica.ccp.admin.v1beta1.ListDecisionsResponse
	9,  // 22: archivematica.ccp.admin.v1beta1.AdminService.ResolveDecision:output_type -> archivematica.ccp.admin.v1beta1.ResolveDecisionResponse
	11, // 23: archivematica.ccp.admin.v1beta1.AdminService.ListProcessingConfigurationFields:output_type -> archivematica.ccp.admin.v1beta1.ListProcessingConfigurationFieldsResponse
	22, // 24: archivematica.ccp.admin.v1beta1.AdminService.ApproveJob:output_type -> archivematica.ccp.admin.v1beta1.ApproveJobResponse
	23, // 25: archivematica.ccp.admin.v1beta1.AdminService.ApproveTransferByPath:output_type -> archivematica.ccp.admin.v1beta1.ApproveTransferByPathResponse
	24, // 26: archivematica.ccp.admin.v1beta1.AdminService.ApprovePartialReingest:output_type -> archivematica.ccp.admin.v1beta1.ApprovePartialReingestResponse
	18, // [18:27] is the sub-list for method output_type
	9,  // [9:18] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_archivematica_ccp_admin_v1beta1_service_proto_init() }
func file_archivematica_ccp_admin_v1beta1_service_proto_init() {
	if File_archivematica_ccp_admin_v1beta1_service_proto != nil {
		return
	}
	file_archivematica_ccp_admin_v1beta1_admin_proto_init()
	file_archivematica_ccp_admin_v1beta1_deprecated_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ReadPackageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ReadPackageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListPackagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ListPackagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListDecisionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListDecisionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveDecisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveDecisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListProcessingConfigurationFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListProcessingConfigurationFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_archivematica_ccp_admin_v1beta1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_archivematica_ccp_admin_v1beta1_service_proto_goTypes,
		DependencyIndexes: file_archivematica_ccp_admin_v1beta1_service_proto_depIdxs,
		MessageInfos:      file_archivematica_ccp_admin_v1beta1_service_proto_msgTypes,
	}.Build()
	File_archivematica_ccp_admin_v1beta1_service_proto = out.File
	file_archivematica_ccp_admin_v1beta1_service_proto_rawDesc = nil
	file_archivematica_ccp_admin_v1beta1_service_proto_goTypes = nil
	file_archivematica_ccp_admin_v1beta1_service_proto_depIdxs = nil
}
