// Code generated by go-enum DO NOT EDIT.
// Version: 0.6.0
// Revision: 919e61c0174b91303753ee3898569a01abb32c97
// Build Date: 2023-12-18T15:54:43Z
// Built By: goreleaser

package enums

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// PackageTypeTransfer is a PackageType of type Transfer.
	PackageTypeTransfer PackageType = "Transfer"
	// PackageTypeSIP is a PackageType of type SIP.
	PackageTypeSIP PackageType = "SIP"
	// PackageTypeDIP is a PackageType of type DIP.
	PackageTypeDIP PackageType = "DIP"
)

var ErrInvalidPackageType = fmt.Errorf("not a valid PackageType, try [%s]", strings.Join(_PackageTypeNames, ", "))

var _PackageTypeNames = []string{
	string(PackageTypeTransfer),
	string(PackageTypeSIP),
	string(PackageTypeDIP),
}

// PackageTypeNames returns a list of possible string values of PackageType.
func PackageTypeNames() []string {
	tmp := make([]string, len(_PackageTypeNames))
	copy(tmp, _PackageTypeNames)
	return tmp
}

// String implements the Stringer interface.
func (x PackageType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PackageType) IsValid() bool {
	_, err := ParsePackageType(string(x))
	return err == nil
}

var _PackageTypeValue = map[string]PackageType{
	"Transfer": PackageTypeTransfer,
	"transfer": PackageTypeTransfer,
	"SIP":      PackageTypeSIP,
	"sip":      PackageTypeSIP,
	"DIP":      PackageTypeDIP,
	"dip":      PackageTypeDIP,
}

// ParsePackageType attempts to convert a string to a PackageType.
func ParsePackageType(name string) (PackageType, error) {
	if x, ok := _PackageTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _PackageTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return PackageType(""), fmt.Errorf("%s is %w", name, ErrInvalidPackageType)
}

func (x PackageType) Ptr() *PackageType {
	return &x
}

// MarshalText implements the text marshaller method.
func (x PackageType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PackageType) UnmarshalText(text []byte) error {
	tmp, err := ParsePackageType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errPackageTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *PackageType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = PackageType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParsePackageType(v)
	case []byte:
		*x, err = ParsePackageType(string(v))
	case PackageType:
		*x = v
	case *PackageType:
		if v == nil {
			return errPackageTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errPackageTypeNilPtr
		}
		*x, err = ParsePackageType(*v)
	default:
		return errors.New("invalid type for PackageType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x PackageType) Value() (driver.Value, error) {
	return x.String(), nil
}

// Set implements the Golang flag.Value interface func.
func (x *PackageType) Set(val string) error {
	v, err := ParsePackageType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *PackageType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *PackageType) Type() string {
	return "PackageType"
}
