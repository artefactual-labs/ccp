// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file archivematica/ccp/admin/v1beta1/admin.proto (package archivematica.ccp.admin.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { I18n } from "./i18n_pb.js";

/**
 * Different types of transfers.
 *
 * @generated from enum archivematica.ccp.admin.v1beta1.TransferType
 */
export enum TransferType {
  /**
   * @generated from enum value: TRANSFER_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TRANSFER_TYPE_STANDARD = 1;
   */
  STANDARD = 1,

  /**
   * @generated from enum value: TRANSFER_TYPE_ZIP_FILE = 2;
   */
  ZIP_FILE = 2,

  /**
   * @generated from enum value: TRANSFER_TYPE_UNZIPPED_BAG = 3;
   */
  UNZIPPED_BAG = 3,

  /**
   * @generated from enum value: TRANSFER_TYPE_ZIPPED_BAG = 4;
   */
  ZIPPED_BAG = 4,

  /**
   * @generated from enum value: TRANSFER_TYPE_DSPACE = 5;
   */
  DSPACE = 5,

  /**
   * @generated from enum value: TRANSFER_TYPE_MAILDIR = 6;
   */
  MAILDIR = 6,

  /**
   * @generated from enum value: TRANSFER_TYPE_TRIM = 7;
   */
  TRIM = 7,

  /**
   * @generated from enum value: TRANSFER_TYPE_DATAVERSE = 8;
   */
  DATAVERSE = 8,
}
// Retrieve enum metadata with: proto3.getEnumType(TransferType)
proto3.util.setEnumType(TransferType, "archivematica.ccp.admin.v1beta1.TransferType", [
  { no: 0, name: "TRANSFER_TYPE_UNSPECIFIED" },
  { no: 1, name: "TRANSFER_TYPE_STANDARD" },
  { no: 2, name: "TRANSFER_TYPE_ZIP_FILE" },
  { no: 3, name: "TRANSFER_TYPE_UNZIPPED_BAG" },
  { no: 4, name: "TRANSFER_TYPE_ZIPPED_BAG" },
  { no: 5, name: "TRANSFER_TYPE_DSPACE" },
  { no: 6, name: "TRANSFER_TYPE_MAILDIR" },
  { no: 7, name: "TRANSFER_TYPE_TRIM" },
  { no: 8, name: "TRANSFER_TYPE_DATAVERSE" },
]);

/**
 * @generated from enum archivematica.ccp.admin.v1beta1.PackageType
 */
export enum PackageType {
  /**
   * @generated from enum value: PACKAGE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PACKAGE_TYPE_TRANSFER = 1;
   */
  TRANSFER = 1,

  /**
   * @generated from enum value: PACKAGE_TYPE_SIP = 2;
   */
  SIP = 2,

  /**
   * @generated from enum value: PACKAGE_TYPE_AIP = 3;
   */
  AIP = 3,

  /**
   * @generated from enum value: PACKAGE_TYPE_DIP = 4;
   */
  DIP = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(PackageType)
proto3.util.setEnumType(PackageType, "archivematica.ccp.admin.v1beta1.PackageType", [
  { no: 0, name: "PACKAGE_TYPE_UNSPECIFIED" },
  { no: 1, name: "PACKAGE_TYPE_TRANSFER" },
  { no: 2, name: "PACKAGE_TYPE_SIP" },
  { no: 3, name: "PACKAGE_TYPE_AIP" },
  { no: 4, name: "PACKAGE_TYPE_DIP" },
]);

/**
 * @generated from enum archivematica.ccp.admin.v1beta1.PackageStatus
 */
export enum PackageStatus {
  /**
   * @generated from enum value: PACKAGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PACKAGE_STATUS_PROCESSING = 1;
   */
  PROCESSING = 1,

  /**
   * @generated from enum value: PACKAGE_STATUS_DONE = 2;
   */
  DONE = 2,

  /**
   * @generated from enum value: PACKAGE_STATUS_COMPLETED_SUCCESSFULLY = 3;
   */
  COMPLETED_SUCCESSFULLY = 3,

  /**
   * @generated from enum value: PACKAGE_STATUS_FAILED = 4;
   */
  FAILED = 4,

  /**
   * This is not found in the database but we can infer it at runtime.
   *
   * @generated from enum value: PACKAGE_STATUS_AWAITING_DECISION = 5;
   */
  AWAITING_DECISION = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(PackageStatus)
proto3.util.setEnumType(PackageStatus, "archivematica.ccp.admin.v1beta1.PackageStatus", [
  { no: 0, name: "PACKAGE_STATUS_UNSPECIFIED" },
  { no: 1, name: "PACKAGE_STATUS_PROCESSING" },
  { no: 2, name: "PACKAGE_STATUS_DONE" },
  { no: 3, name: "PACKAGE_STATUS_COMPLETED_SUCCESSFULLY" },
  { no: 4, name: "PACKAGE_STATUS_FAILED" },
  { no: 5, name: "PACKAGE_STATUS_AWAITING_DECISION" },
]);

/**
 * @generated from enum archivematica.ccp.admin.v1beta1.JobStatus
 */
export enum JobStatus {
  /**
   * @generated from enum value: JOB_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: JOB_STATUS_AWAITING_DECISION = 1;
   */
  AWAITING_DECISION = 1,

  /**
   * @generated from enum value: JOB_STATUS_COMPLETED_SUCCESSFULLY = 2;
   */
  COMPLETED_SUCCESSFULLY = 2,

  /**
   * @generated from enum value: JOB_STATUS_EXECUTING_COMMANDS = 3;
   */
  EXECUTING_COMMANDS = 3,

  /**
   * @generated from enum value: JOB_STATUS_FAILED = 4;
   */
  FAILED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(JobStatus)
proto3.util.setEnumType(JobStatus, "archivematica.ccp.admin.v1beta1.JobStatus", [
  { no: 0, name: "JOB_STATUS_UNSPECIFIED" },
  { no: 1, name: "JOB_STATUS_AWAITING_DECISION" },
  { no: 2, name: "JOB_STATUS_COMPLETED_SUCCESSFULLY" },
  { no: 3, name: "JOB_STATUS_EXECUTING_COMMANDS" },
  { no: 4, name: "JOB_STATUS_FAILED" },
]);

/**
 * @generated from message archivematica.ccp.admin.v1beta1.Package
 */
export class Package extends Message<Package> {
  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of the transfer.
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Type of the transfer.
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.TransferType type = 3;
   */
  type = TransferType.UNSPECIFIED;

  /**
   * Status of the package.
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.PackageStatus status = 4;
   */
  status = PackageStatus.UNSPECIFIED;

  /**
   * Creation timestamp.
   *
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * Current directory.
   *
   * @generated from field: string directory = 6;
   */
  directory = "";

  /**
   * Access system identifier.
   *
   * @generated from field: string access_system_id = 7;
   */
  accessSystemId = "";

  /**
   * Whether the package has been hidden by the user.
   *
   * @generated from field: bool hidden = 8;
   */
  hidden = false;

  /**
   * List of associated jobs. It may not always be populated.
   *
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Job job = 9;
   */
  job: Job[] = [];

  constructor(data?: PartialMessage<Package>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.Package";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TransferType) },
    { no: 4, name: "status", kind: "enum", T: proto3.getEnumType(PackageStatus) },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
    { no: 6, name: "directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "access_system_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "job", kind: "message", T: Job, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Package {
    return new Package().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Package {
    return new Package().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Package {
    return new Package().fromJsonString(jsonString, options);
  }

  static equals(a: Package | PlainMessage<Package> | undefined, b: Package | PlainMessage<Package> | undefined): boolean {
    return proto3.util.equals(Package, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.Job
 */
export class Job extends Message<Job> {
  /**
   * Identifier of the job (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string package_id = 2;
   */
  packageId = "";

  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.PackageType package_type = 3;
   */
  packageType = PackageType.UNSPECIFIED;

  /**
   * @generated from field: string link_id = 4;
   */
  linkId = "";

  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.JobStatus status = 5;
   */
  status = JobStatus.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: string group = 7;
   */
  group = "";

  /**
   * @generated from field: string link_description = 8;
   */
  linkDescription = "";

  /**
   * @generated from field: bool hidden = 9;
   */
  hidden = false;

  /**
   * @generated from field: string directory = 10;
   */
  directory = "";

  /**
   * Only populated if requested.
   * TODO: this is not efficient but it's currently needed.
   *
   * @generated from field: archivematica.ccp.admin.v1beta1.Decision decision = 11;
   */
  decision?: Decision;

  constructor(data?: PartialMessage<Job>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.Job";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "package_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "package_type", kind: "enum", T: proto3.getEnumType(PackageType) },
    { no: 4, name: "link_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(JobStatus) },
    { no: 6, name: "created_at", kind: "message", T: Timestamp },
    { no: 7, name: "group", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "link_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "hidden", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "directory", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "decision", kind: "message", T: Decision },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Job {
    return new Job().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Job {
    return new Job().fromJsonString(jsonString, options);
  }

  static equals(a: Job | PlainMessage<Job> | undefined, b: Job | PlainMessage<Job> | undefined): boolean {
    return proto3.util.equals(Job, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.Decision
 */
export class Decision extends Message<Decision> {
  /**
   * Identifier of the decision (UUIDv4).
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Name of the decision (prompt).
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Identifier of the package (UUIDv4).
   *
   * @generated from field: string package_id = 3;
   */
  packageId = "";

  /**
   * @generated from field: string package_path = 4;
   */
  packagePath = "";

  /**
   * "Transfer", "SIP", "DIP".
   *
   * @generated from field: string package_type = 5;
   */
  packageType = "";

  /**
   * Identifier of the job (UUIDv4).
   *
   * @generated from field: string job_id = 6;
   */
  jobId = "";

  /**
   * Ordered list of choices. The position can be used to resolve a decision.
   *
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.Choice choice = 7;
   */
  choice: Choice[] = [];

  constructor(data?: PartialMessage<Decision>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.Decision";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "package_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "package_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "package_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "job_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "choice", kind: "message", T: Choice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Decision {
    return new Decision().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Decision {
    return new Decision().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Decision {
    return new Decision().fromJsonString(jsonString, options);
  }

  static equals(a: Decision | PlainMessage<Decision> | undefined, b: Decision | PlainMessage<Decision> | undefined): boolean {
    return proto3.util.equals(Decision, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.Choice
 */
export class Choice extends Message<Choice> {
  /**
   * Identifier of the choice based on its position in the ordered choice list.
   *
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * Label or description of the choice.
   *
   * @generated from field: string label = 2;
   */
  label = "";

  constructor(data?: PartialMessage<Choice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.Choice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Choice {
    return new Choice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Choice {
    return new Choice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Choice {
    return new Choice().fromJsonString(jsonString, options);
  }

  static equals(a: Choice | PlainMessage<Choice> | undefined, b: Choice | PlainMessage<Choice> | undefined): boolean {
    return proto3.util.equals(Choice, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ProcessingConfigField
 */
export class ProcessingConfigField extends Message<ProcessingConfigField> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.I18n label = 3;
   */
  label?: I18n;

  /**
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice choice = 4;
   */
  choice: ProcessingConfigFieldChoice[] = [];

  constructor(data?: PartialMessage<ProcessingConfigField>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ProcessingConfigField";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "message", T: I18n },
    { no: 4, name: "choice", kind: "message", T: ProcessingConfigFieldChoice, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingConfigField {
    return new ProcessingConfigField().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingConfigField {
    return new ProcessingConfigField().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingConfigField {
    return new ProcessingConfigField().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessingConfigField | PlainMessage<ProcessingConfigField> | undefined, b: ProcessingConfigField | PlainMessage<ProcessingConfigField> | undefined): boolean {
    return proto3.util.equals(ProcessingConfigField, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice
 */
export class ProcessingConfigFieldChoice extends Message<ProcessingConfigFieldChoice> {
  /**
   * @generated from field: string value = 1;
   */
  value = "";

  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.I18n label = 2;
   */
  label?: I18n;

  /**
   * @generated from field: repeated archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo applies_to = 3;
   */
  appliesTo: ProcessingConfigFieldChoiceAppliesTo[] = [];

  constructor(data?: PartialMessage<ProcessingConfigFieldChoice>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoice";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "label", kind: "message", T: I18n },
    { no: 3, name: "applies_to", kind: "message", T: ProcessingConfigFieldChoiceAppliesTo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingConfigFieldChoice {
    return new ProcessingConfigFieldChoice().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingConfigFieldChoice {
    return new ProcessingConfigFieldChoice().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingConfigFieldChoice {
    return new ProcessingConfigFieldChoice().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessingConfigFieldChoice | PlainMessage<ProcessingConfigFieldChoice> | undefined, b: ProcessingConfigFieldChoice | PlainMessage<ProcessingConfigFieldChoice> | undefined): boolean {
    return proto3.util.equals(ProcessingConfigFieldChoice, a, b);
  }
}

/**
 * @generated from message archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo
 */
export class ProcessingConfigFieldChoiceAppliesTo extends Message<ProcessingConfigFieldChoiceAppliesTo> {
  /**
   * @generated from field: string link_id = 1;
   */
  linkId = "";

  /**
   * E.g. URI, replacement ID, chainID...
   *
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: archivematica.ccp.admin.v1beta1.I18n label = 3;
   */
  label?: I18n;

  constructor(data?: PartialMessage<ProcessingConfigFieldChoiceAppliesTo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "archivematica.ccp.admin.v1beta1.ProcessingConfigFieldChoiceAppliesTo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "link_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "message", T: I18n },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProcessingConfigFieldChoiceAppliesTo {
    return new ProcessingConfigFieldChoiceAppliesTo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProcessingConfigFieldChoiceAppliesTo {
    return new ProcessingConfigFieldChoiceAppliesTo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProcessingConfigFieldChoiceAppliesTo {
    return new ProcessingConfigFieldChoiceAppliesTo().fromJsonString(jsonString, options);
  }

  static equals(a: ProcessingConfigFieldChoiceAppliesTo | PlainMessage<ProcessingConfigFieldChoiceAppliesTo> | undefined, b: ProcessingConfigFieldChoiceAppliesTo | PlainMessage<ProcessingConfigFieldChoiceAppliesTo> | undefined): boolean {
    return proto3.util.equals(ProcessingConfigFieldChoiceAppliesTo, a, b);
  }
}

